{"version":3,"sources":["Home/UserContext.tsx","Boiler/NavBarProfile.tsx","Boiler/NavBar.tsx","Boiler/Header.tsx","Boiler/Footer.tsx","UserAuth/Login.tsx","Thread/AddPost.tsx","Thread/Post/PostHeader.tsx","Thread/Post/PostFooter.tsx","Thread/Post/PostBody.tsx","Home/PostContext.tsx","Thread/Post/PostVotes.tsx","Thread/Post/Post.tsx","Thread/Thread.tsx","UserAuth/Register.tsx","Community/AddThread.tsx","Community/ThreadCard.tsx","Community/Home.tsx","Home/MainPage.tsx","Community/CommunityBanner.tsx","App.tsx","index.js"],"names":["UserContext","createContext","NavBarProfile","server","process","useContext","username","setUsername","history","useHistory","location","useLocation","a","undefined","sessionID","localStorage","getItem","fetch","result","json","jsoned","includes","pathname","push","useEffect","mounted","removeItem","getUsername","className","to","onClick","length","renderRegister","NavBar","Header","Footer","style","position","bottom","Login","useState","password","setPassword","status","setStatus","setUsernameAlias","e","preventDefault","obj","body","JSON","stringify","headers","method","response","hasOwnProperty","error","setItem","type","value","onChange","target","placeholder","AddPost","threadID","noRenderButton","loadThread","parentPostID","setRenderReplyForm","addPostOn","setAddPostOn","content","setContent","imageURL","setImageURL","makePost","post","date","Date","getTime","toString","childrenIDs","parentID","current","cancelHandler","rows","PostHeader","timeSince","setTimeSince","timer","setInterval","time","parseInt","clearTimeout","prettyMS","compact","PostFooter","renderChildren","setRenderChildren","deletePost","postID","id","hidden","resp","toggleReplies","hidePostServerSide","cursor","prev","deleted","deletePostButton","PostBody","wordBreak","maxWidth","width","height","src","alt","renderImage","PostContext","PostVotes","votes","setVotes","userVote","setUserVote","voteReload","postToReload","setPostToReload","getVotes","usersVote","jsonedvote","vote","payload","Provider","size","color","marginBottom","Post","getPost","indentLevel","newPost","postNotProp","setPostNotProp","childrenPosts","setChildrenPosts","renderReplyForm","newPostObj","setNewPostObj","deleteReload","deletedPost","setDeletedPost","padding","retrievePost","result2","updatedpost","console","log","r","loadPost","updatedPost","marginLeft","paddingLeft","renderReply","map","socket","io","Thread","title","_id","posts","thread","setThread","useParams","communityName","hist","topLevelPosts","setTopLevelPosts","res","deleteThread","getPostByID","connect","emit","on","disconnect","minWidth","renderOwnerActions","wordWrap","index","Register","confirmPassword","setConfirmPassword","setError","checkPasswordsSame","Promise","setTimeout","registerUser","AddThread","addThreadOn","setAddThreadOn","setTitle","checkThreadValidity","makeThread","errorMessage","ThreadCard","substring","Home","threads","setThreads","newThread","filter","x","renderError","Mainpage","communitites","setCommunities","searchValue","setSearchValue","renderedCommunities","setRenderedCommunities","searchCommunities","searchText","community","results","Fuzzy","extract","item","string","CommunityBanner","App","basename","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1acc948.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const UserContext = createContext<any>(null);\r\n","import { useContext } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport { UserContext } from \"../Home/UserContext\";\r\n\r\nconst NavBarProfile = () => {\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const { username, setUsername } = useContext(UserContext);\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  async function getUsername() {\r\n    const sessionID = localStorage.getItem(\"sessionID\");\r\n\r\n    if (sessionID === undefined) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = await fetch(server + \"getUsername/\" + sessionID);\r\n      const jsoned = await result.json();\r\n      // redirect to login if not logged in\r\n      if (\r\n        !jsoned.username &&\r\n        ![\"/login\", \"/register\"].includes(location.pathname)\r\n      ) {\r\n        history.push(\"/login\");\r\n        return;\r\n      }\r\n      setUsername(jsoned.username);\r\n    } catch (error) {\r\n      history.push(\"/login\");\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    // explicitly redirect to login for all non specified routes\r\n    if (location.pathname === \"/\" || location.pathname === \"/login\") {\r\n      localStorage.removeItem(\"sessionID\");\r\n      history.push(\"/login\");\r\n      if (mounted) {\r\n        setUsername(\"\");\r\n      }\r\n      return;\r\n    }\r\n\r\n    getUsername();\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, [location.pathname]);\r\n\r\n  /** Logs the user out. */\r\n  function logout() {\r\n    localStorage.removeItem(\"sessionID\");\r\n    setUsername(\"\");\r\n  }\r\n\r\n  /** Render logout button if logged in */\r\n  function renderLogoutConditionally() {\r\n    // if logged in\r\n    if (username && username.length > 0) {\r\n      return <h5 className=\"text-primary\">logout</h5>;\r\n    }\r\n\r\n    if (location.pathname === \"/register\") {\r\n      return <h5>Login</h5>;\r\n    }\r\n  }\r\n\r\n  /** Render Register button if not logged in */\r\n  function renderRegister() {\r\n    if (location.pathname === \"/register\") {\r\n      return;\r\n    }\r\n\r\n    // if logged out and not on register page\r\n    if (!username) {\r\n      return <h5 className=\"font-weight-bold\">Register</h5>;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h6 className=\"text-white\">{username}</h6>\r\n      <div className=\"d-flex flex-row\">\r\n        <Link className=\"mr-3\" to=\"/login\" onClick={logout}>\r\n          {renderLogoutConditionally()}\r\n        </Link>\r\n        <Link to=\"/register\">{renderRegister()}</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBarProfile;\r\n","import { Link } from \"react-router-dom\";\r\nimport NavBarProfile from \"./NavBarProfile\";\r\n\r\nconst NavBar = () => {\r\n  /** Returns where the home button should redirect to. */\r\n  function allowedUrl(): string {\r\n    if (localStorage.getItem(\"sessionID\") === null) {\r\n      return \"#\";\r\n    }\r\n    return \"/home\";\r\n  }\r\n  return (\r\n    <div className=\"bg-dark navbar w-100 static-top\">\r\n      <Link to={allowedUrl}>\r\n        <h1 className=\"navbar-brand mx-3 text-light\">Forum Clone</h1>\r\n      </Link>\r\n\r\n      <NavBarProfile />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import NavBar from \"./NavBar\";\r\nimport { createContext, useState } from \"react\";\r\n\r\n// interface UserContextType {\r\n//   username: string | null;\r\n//   setUsername: React.Dispatch<React.SetStateAction<string>>;\r\n// }\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","const Footer = () => {\r\n  return (\r\n    <div className=\"bg-dark w-100\" style={{ position: \"fixed\", bottom: 0 }}>\r\n      <h6 className=\"text-light m-2\">Dom Zhu - 2021</h6>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { useHistory, Link, useLocation } from \"react-router-dom\";\r\nimport { UserContext } from \"../Home/UserContext\";\r\n\r\nconst Login: React.FC = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const history = useHistory();\r\n  const usernameAlias = useContext(UserContext).username;\r\n  const setUsernameAlias = useContext(UserContext).setUsername;\r\n\r\n  const location = useLocation();\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n\r\n  /** Logs the user in. */\r\n  async function login(e: React.MouseEvent) {\r\n    e.preventDefault();\r\n\r\n    const obj = {\r\n      username: username,\r\n      password: password,\r\n    };\r\n\r\n    // send off to server\r\n    const url = server + \"login\";\r\n    try {\r\n      const result = await fetch(url, {\r\n        body: JSON.stringify(obj),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n      });\r\n      const response = await result.json();\r\n\r\n      if (response.hasOwnProperty(\"error\")) {\r\n        setStatus(response.error);\r\n        return;\r\n      }\r\n      localStorage.setItem(\"sessionID\", response.sessionID);\r\n\r\n      // username already used locally, so need different var name\r\n      setUsernameAlias(username);\r\n      history.push(\"/home\");\r\n    } catch (err) {\r\n      setStatus(\"Failed to login. Please try again.\");\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setUsernameAlias(\"\");\r\n    if (location.pathname !== \"/login\") {\r\n      history.push(\"/login\");\r\n    }\r\n  }, [location.pathname, history, setUsernameAlias]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-12 col-sm-8 offset-sm-2 col-xl-6 offset-xl-3\">\r\n          <form className=\"mt-5\">\r\n            <h1 className=\"mb-4 text-center\">Login</h1>\r\n            <div className=\"form-group mb-2\">\r\n              <label>Username</label>\r\n              <input\r\n                type=\"text\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n                className=\"form-control\"\r\n                placeholder=\"Enter username\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group mb-3\">\r\n              <label>Password</label>\r\n              <input\r\n                type=\"password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                className=\"form-control\"\r\n                placeholder=\"Enter password\"\r\n              />\r\n            </div>\r\n            <button type=\"submit\" onClick={login} className=\"btn btn-primary\">\r\n              Submit\r\n            </button>\r\n          </form>\r\n          <Link to=\"/register\">\r\n            <div className=\"mt-1\">New user? Click here to register!</div>\r\n          </Link>\r\n          {status.length > 0 && (\r\n            <h5 className=\"mt-3 alert alert-danger\">{status}</h5>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { useState, useContext, useEffect } from \"react\";\r\nimport { UserContext } from \"../Home/UserContext\";\r\n\r\ninterface Props {\r\n  // the current thread's ID\r\n  threadID: string;\r\n  loadThread: () => void;\r\n\r\n  // if false, then don't render the add post button\r\n  noRenderButton?: boolean;\r\n\r\n  // when in reply mode\r\n  parentPostID?: string;\r\n\r\n  // so we can remove the reply form component when post submitted\r\n  setRenderReplyForm?: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\ninterface PostRequest {\r\n  username: string;\r\n  content: string;\r\n  date: string;\r\n  threadID: string;\r\n  childrenIDs: string[]; // TODO maybe make server side\r\n  parentID?: string;\r\n  imageURL: string;\r\n}\r\n\r\nconst AddPost = ({\r\n  threadID,\r\n  loadThread,\r\n  noRenderButton,\r\n  parentPostID,\r\n  setRenderReplyForm,\r\n}: Props) => {\r\n  const [addPostOn, setAddPostOn] = useState<boolean>(false);\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const [content, setContent] = useState<string>(\"\");\r\n  const { username } = useContext(UserContext);\r\n  const [imageURL, setImageURL] = useState<string>(\"\");\r\n\r\n  useEffect(() => {\r\n    if (noRenderButton === undefined) {\r\n      setAddPostOn(false);\r\n    } else {\r\n      setAddPostOn(true);\r\n    }\r\n  }, []);\r\n\r\n  /** Makes a post to the server */\r\n  async function makePost() {\r\n    // console.log(new Date().getTime().toString());\r\n    const post: PostRequest = {\r\n      username: username, // username temp\r\n      content: content,\r\n      date: new Date().getTime().toString(),\r\n      threadID: threadID,\r\n      childrenIDs: [],\r\n      parentID: parentPostID, // TODO if not reply, then parentID is ''\r\n      imageURL: imageURL,\r\n    };\r\n\r\n    try {\r\n      const result = await fetch(server + \"makePost\", {\r\n        body: JSON.stringify(post),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n      });\r\n      const response = await result.json();\r\n      // loadThread();\r\n      setAddPostOn((current) => !current);\r\n      setContent(\"\");\r\n      setImageURL(\"\");\r\n    } catch (error) {\r\n      // TODO error handling\r\n      return;\r\n    }\r\n\r\n    cancelHandler();\r\n  }\r\n\r\n  /** Closes the form. */\r\n  function cancelHandler() {\r\n    setAddPostOn(false);\r\n    if (setRenderReplyForm) {\r\n      setRenderReplyForm(false);\r\n    }\r\n  }\r\n\r\n  /** Renders the add post form. */\r\n  function renderForm() {\r\n    return (\r\n      <div className=\"form-group mt-4 mb-5\">\r\n        <label className=\"\">Content</label>\r\n        <textarea\r\n          value={content}\r\n          placeholder=\"What are your thoughts?\"\r\n          onChange={(e) => setContent(e.target.value)}\r\n          className=\"form-control border border-secondary\"\r\n          rows={6}\r\n        />\r\n        <div className=\"mt-3\">\r\n          <label>Image url</label>\r\n          <input\r\n            value={imageURL}\r\n            type=\"text\"\r\n            onChange={(e) => setImageURL(e.target.value)}\r\n            className=\"form-control border border-secondary\"\r\n          />\r\n        </div>\r\n        <div className=\"d-flex flex-row justify-content-end\">\r\n          <button\r\n            onClick={(e) => cancelHandler()}\r\n            className=\"btn btn-primary mt-2\"\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            onClick={makePost}\r\n            className=\"btn btn-primary mt-2 ml-3 bg-secondary text-dark border border-secondary\"\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /** Renders the add post button. */\r\n  function renderButton() {\r\n    return (\r\n      <div>\r\n        <button\r\n          className=\"btn btn-primary\"\r\n          onClick={() => setAddPostOn((current) => !current)}\r\n        >\r\n          Add Reply\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {addPostOn && renderForm()}\r\n      {!addPostOn && !noRenderButton && renderButton()}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddPost;\r\n","import { PostObj } from \"../Thread\";\r\nimport prettyMS from \"pretty-ms\";\r\nimport { useState, useEffect } from \"react\";\r\ninterface Props {\r\n  post: PostObj;\r\n}\r\n\r\nconst PostHeader = ({ post }: Props) => {\r\n  const [timeSince, setTimeSince] = useState<number>(0);\r\n\r\n  useEffect(() => {\r\n    let timer = setInterval(() => {\r\n      const time = new Date().getTime() - parseInt(post.date);\r\n\r\n      setTimeSince(time);\r\n    }, 100);\r\n\r\n    // cleanup\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [post.date]);\r\n  // continuously update how long ago the post was made\r\n\r\n  return (\r\n    <div className=\"row p-2 d-flex justify-content-between\">\r\n      <h6 className=\"text-white ml-1\">{post.username}</h6>\r\n      <h6>\r\n        {post.date !== \"1\" && (\r\n          <small className=\"ml-3 text-muted\">\r\n            {prettyMS(timeSince, { compact: true })} ago\r\n          </small>\r\n        )}\r\n      </h6>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostHeader;\r\n","import { PostObj } from \"../Thread\";\r\nimport { UserContext } from \"../../Home/UserContext\";\r\nimport { useContext } from \"react\";\r\n\r\ninterface Props {\r\n  post: PostObj;\r\n  renderChildren: boolean;\r\n  setRenderReplyForm: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setRenderChildren: React.Dispatch<React.SetStateAction<boolean>>;\r\n  deletePost: () => void;\r\n}\r\n\r\nconst PostFooter = ({\r\n  post,\r\n  renderChildren,\r\n  setRenderReplyForm,\r\n  setRenderChildren,\r\n  deletePost,\r\n}: Props) => {\r\n  const username = useContext(UserContext).username;\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n\r\n  /** Hides the post for the user. */\r\n  async function hidePostServerSide() {\r\n    const resp = await fetch(server + \"hidePost\", {\r\n      body: JSON.stringify({\r\n        username: username,\r\n        postID: post.id,\r\n        hidden: renderChildren,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n    });\r\n    const jsoned = await resp.json();\r\n    // console.log(jsoned);\r\n  }\r\n\r\n  /** Hides replies from the post which was clicked */\r\n  function toggleReplies() {\r\n    setRenderChildren((current) => !current);\r\n    hidePostServerSide();\r\n    // console.log(username);\r\n    return;\r\n  }\r\n\r\n  /** the reply button */\r\n  function replyButton() {\r\n    return (\r\n      <div>\r\n        <h6 className=\"text-muted\">\r\n          <small\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={(e) => setRenderReplyForm((prev) => !prev)}\r\n          >\r\n            Reply\r\n          </small>\r\n        </h6>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /** the show / hide reply button */\r\n  function showHideReplyButton() {\r\n    // dont render if no children\r\n    if (post.childrenIDs.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div className={\"ml-3\"}>\r\n        <h6 className=\"text-muted\">\r\n          <small style={{ cursor: \"pointer\" }} onClick={(e) => toggleReplies()}>\r\n            {!renderChildren && \"Show Replies\"}\r\n            {renderChildren && \"Hide Replies\"}\r\n          </small>\r\n        </h6>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /** the delete post button */\r\n  function deletePostButton() {\r\n    // only render if post isn't already deleted\r\n    if (post.deleted) {\r\n      return;\r\n    }\r\n\r\n    // only delete your own posts // TODO fix server side\r\n    if (post.username !== username) {\r\n      return;\r\n    }\r\n\r\n    return (\r\n      <div className={\"ml-3\"}>\r\n        <h6 className=\"text-muted\">\r\n          <small style={{ cursor: \"pointer\" }} onClick={(e) => deletePost()}>\r\n            Delete Post\r\n          </small>\r\n        </h6>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col d-flex\">\r\n        {replyButton()}\r\n        {showHideReplyButton()}\r\n        {deletePostButton()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostFooter;\r\n","import { PostObj } from \"../Thread\";\r\n\r\ninterface Props {\r\n  post: PostObj;\r\n}\r\n\r\nconst PostBody = ({ post }: Props) => {\r\n  /** Renders the image if necessary */\r\n  function renderImage(): JSX.Element | void {\r\n    if (post.imageURL !== \"\") {\r\n      return (\r\n        <img\r\n          className=\"mb-2\"\r\n          style={{ maxWidth: \"400px\", width: \"100%\", height: \"auto\" }}\r\n          src={post.imageURL}\r\n          alt=\"\"\r\n        />\r\n      );\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"row pl-2\">\r\n        <div className=\"text-white ml-1\">\r\n          {post.deleted ? (\r\n            <h6 className=\"text-danger\">[Deleted]</h6>\r\n          ) : (\r\n            <p style={{ wordBreak: \"break-word\" }}>{post.content}</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n      {renderImage()}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostBody;\r\n","import { createContext } from \"react\";\r\n\r\nexport const PostContext = createContext<any>(null);\r\n","import { useState, useEffect, useContext } from \"react\";\r\nimport { IconContext } from \"react-icons\";\r\nimport { IoIosArrowUp, IoIosArrowDown } from \"react-icons/io\";\r\nimport { PostContext } from \"../../Home/PostContext\";\r\n\r\ninterface Props {\r\n  postID: string;\r\n  username: string;\r\n}\r\n\r\nconst PostVotes = ({ postID, username }: Props) => {\r\n  const [votes, setVotes] = useState<number>(0);\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const [userVote, setUserVote] = useState<number>(0);\r\n  const voteReload = useContext(PostContext).voteReload;\r\n  const [postToReload, setPostToReload] = voteReload;\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (mounted) {\r\n      if (postToReload === postID) {\r\n        // reload post\r\n        getVotes();\r\n        setPostToReload(null);\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, [postToReload]);\r\n\r\n  // get all votes on startup\r\n  useEffect(() => {\r\n    getVotes();\r\n  }, [username]);\r\n\r\n  async function getVotes() {\r\n    if (username === \"\") return;\r\n\r\n    const resp = await fetch(server + \"getPostVotes\", {\r\n      body: JSON.stringify({ postID: postID }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n    });\r\n    const jsoned = await resp.json();\r\n    setVotes(parseInt(jsoned.votes));\r\n\r\n    // set colour and upvote\r\n    const usersVote = await fetch(server + \"getUsersVotes\", {\r\n      body: JSON.stringify({ postID: postID, username: username }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n    });\r\n    const jsonedvote = await usersVote.json();\r\n    setUserVote(jsonedvote.vote);\r\n  }\r\n\r\n  /** Upvotes or downvotes post */\r\n  async function vote(vote: string) {\r\n    const payload = {\r\n      postID: postID,\r\n      vote: vote,\r\n      username: username,\r\n    };\r\n\r\n    fetch(server + \"upvotePost\", {\r\n      body: JSON.stringify(payload),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n    });\r\n  }\r\n\r\n  // TODO change hardcoded votes\r\n  return (\r\n    <div className=\"d-flex flex-column mx-2\">\r\n      <IconContext.Provider value={{ size: \"2em\" }}>\r\n        {userVote === 1 && (\r\n          <IoIosArrowUp\r\n            style={{ cursor: \"pointer\", color: \"orange\" }}\r\n            onClick={(e) => vote(\"1\")}\r\n          />\r\n        )}\r\n        {userVote !== 1 && (\r\n          <IoIosArrowUp\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={(e) => vote(\"1\")}\r\n          />\r\n        )}\r\n\r\n        <h5 className=\"text-white text-center\" style={{ marginBottom: \"0\" }}>\r\n          {votes}\r\n        </h5>\r\n        {userVote === -1 && (\r\n          <IoIosArrowDown\r\n            style={{ cursor: \"pointer\", color: \"blue\" }}\r\n            onClick={(e) => vote(\"-1\")}\r\n          />\r\n        )}\r\n        {userVote !== -1 && (\r\n          <IoIosArrowDown\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={(e) => vote(\"-1\")}\r\n          />\r\n        )}\r\n      </IconContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostVotes;\r\n","import { PostObj } from \"../Thread\";\r\nimport AddPost from \"../AddPost\";\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport PostHeader from \"./PostHeader\";\r\nimport PostFooter from \"./PostFooter\";\r\nimport PostBody from \"./PostBody\";\r\nimport PostVotes from \"./PostVotes\";\r\nimport { UserContext } from \"../../Home/UserContext\";\r\nimport { PostContext } from \"../../Home/PostContext\";\r\n\r\ninterface Props {\r\n  postID: string;\r\n  threadID: string;\r\n  loadThread: () => void;\r\n  getPost: (postID: string) => PostObj | null;\r\n  indentLevel: number;\r\n  newPost: PostObj | null;\r\n}\r\n\r\nconst server = process.env.REACT_APP_API_SERVER;\r\n\r\nconst Post = ({\r\n  postID,\r\n  threadID,\r\n  loadThread,\r\n  getPost,\r\n  indentLevel,\r\n  newPost,\r\n}: Props) => {\r\n  const defaultPost: PostObj = {\r\n    childrenIDs: [],\r\n    content: \"loading...\",\r\n    date: \"1\",\r\n    id: \"\",\r\n    imageURL: \"\",\r\n    parentID: \"\",\r\n    username: \"loading...\",\r\n  };\r\n  const username = useContext(UserContext).username;\r\n\r\n  // TODO fix later\r\n  const [postNotProp, setPostNotProp] = useState<PostObj>(defaultPost);\r\n\r\n  const [childrenPosts, setChildrenPosts] = useState<string[]>([]);\r\n  // determines if the reply form will be rendered\r\n  const [renderReplyForm, setRenderReplyForm] = useState<boolean>(false);\r\n\r\n  // determines if children are rendered\r\n  const [renderChildren, setRenderChildren] = useState<boolean>(true);\r\n  const [newPostObj, setNewPostObj] = useState<PostObj | null>(newPost);\r\n\r\n  const [deletedPost, setDeletedPost] = useContext(PostContext).deleteReload;\r\n\r\n  // how many pixels each indent level is\r\n  const padding = indentLevel * 20;\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    const loadPost = async () => {\r\n      const r = await retrievePost(postID);\r\n      if (mounted) {\r\n        setPostNotProp(r);\r\n        setChildrenPosts(r.childrenIDs);\r\n      }\r\n    };\r\n\r\n    loadPost();\r\n\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (deletedPost === postID) {\r\n      const updatedPost = postNotProp;\r\n      updatedPost.deleted = true;\r\n      setPostNotProp(updatedPost);\r\n      setDeletedPost(null);\r\n    }\r\n  }, [deletedPost]);\r\n\r\n  useEffect(() => {\r\n    if (newPost === null) {\r\n      return;\r\n    }\r\n\r\n    if (newPost.parentID === postID) {\r\n      setChildrenPosts((current) => [...current, newPost.id]);\r\n\r\n      let updatedPost: PostObj = postNotProp;\r\n      updatedPost.childrenIDs = [...postNotProp.childrenIDs, newPost.id];\r\n\r\n      setPostNotProp(updatedPost);\r\n      setNewPostObj(null);\r\n      return;\r\n    }\r\n\r\n    setNewPostObj(newPost);\r\n  }, [newPost]);\r\n\r\n  /** toggles the reply form when reply clicked */\r\n  function renderReply() {\r\n    if (renderReplyForm) {\r\n      return (\r\n        <AddPost\r\n          threadID={threadID}\r\n          loadThread={loadThread}\r\n          noRenderButton={true}\r\n          parentPostID={postNotProp.id}\r\n          setRenderReplyForm={setRenderReplyForm}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Gets post */\r\n  async function retrievePost(postID: string) {\r\n    const payload = { threadID: threadID, postID: postID };\r\n\r\n    const result = await fetch(server + \"getPost\", {\r\n      body: JSON.stringify(payload),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n    });\r\n    const response: PostObj = await result.json();\r\n    // return response;\r\n\r\n    // get hidden state.\r\n    const result2 = await fetch(server + \"isPostHidden\", {\r\n      body: JSON.stringify({\r\n        username: username,\r\n        postID: postID,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n    });\r\n    const jsoned = await result2.json();\r\n    // console.log(`post id: ${postID} is hidden: ${jsoned.status}`);\r\n    setRenderChildren(!jsoned.status);\r\n\r\n    // console.log(response);\r\n    return response;\r\n  }\r\n\r\n  /** Deletes a post from the server */\r\n  async function deletePost() {\r\n    const payload = { threadID: threadID, postID: postID };\r\n\r\n    try {\r\n      const result = await fetch(server + \"deletePost\", {\r\n        body: JSON.stringify(payload),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n      });\r\n      const response: Object = await result.json();\r\n      if (response.hasOwnProperty(\"status\")) {\r\n        const updatedpost = await retrievePost(postID);\r\n        setPostNotProp(updatedpost);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    // card\r\n    <>\r\n      <div style={{ marginLeft: padding, width: \"auto\" }}>\r\n        <div className=\"my-3 d-flex border border-secondary rounded bg-dark\">\r\n          <PostVotes postID={postID} username={username} />\r\n          <div className=\"container\" style={{ paddingLeft: \"0\" }}>\r\n            <PostHeader post={postNotProp} />\r\n            <PostBody post={postNotProp} />\r\n            <PostFooter\r\n              post={postNotProp}\r\n              renderChildren={renderChildren}\r\n              setRenderReplyForm={setRenderReplyForm}\r\n              setRenderChildren={setRenderChildren}\r\n              deletePost={deletePost}\r\n            />\r\n          </div>\r\n        </div>\r\n        {renderReply()}\r\n      </div>\r\n      {/* Recursively render children */}\r\n      {renderChildren &&\r\n        childrenPosts.map((id) => {\r\n          // console.log(childrenPosts.length);\r\n          if (id !== null) {\r\n            return (\r\n              <Post\r\n                key={id}\r\n                loadThread={loadThread}\r\n                postID={id}\r\n                getPost={getPost}\r\n                threadID={threadID}\r\n                indentLevel={indentLevel + 1}\r\n                newPost={newPostObj}\r\n              />\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import { useState, useEffect, useContext } from \"react\";\r\nimport { IconContext } from \"react-icons\";\r\nimport { ImCross } from \"react-icons/im\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport Post from \"./Post/Post\";\r\nimport AddPost from \"./AddPost\";\r\nimport { UserContext } from \"../Home/UserContext\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport { PostContext } from \"../Home/PostContext\";\r\nconst SOCKET_SERVER: any = process.env.REACT_APP_SOCKET_SERVER;\r\nconst socket = io(SOCKET_SERVER);\r\nexport interface PostObj {\r\n  username: string;\r\n  content: string;\r\n  date: string; // TODO change\r\n\r\n  // post id\r\n  id: string;\r\n\r\n  // array of all the ids for children posts\r\n  childrenIDs: string[];\r\n\r\n  // the id of the parent post\r\n  parentID: string;\r\n\r\n  imageURL: string;\r\n\r\n  // if the post has been deleted\r\n  deleted?: boolean;\r\n}\r\n\r\nexport interface ThreadObject {\r\n  title: string;\r\n  username: string;\r\n  content: string;\r\n  _id: string;\r\n  posts: PostObj[];\r\n  error?: string;\r\n  id?: string;\r\n}\r\n\r\n// TODO if your own post / thread, you can delete\r\nconst Thread = () => {\r\n  const defaultThread: ThreadObject = {\r\n    title: \"\",\r\n    content: \"\",\r\n    username: \"\",\r\n    _id: \"\",\r\n    posts: [],\r\n  };\r\n\r\n  const { username, setUsername } = useContext(UserContext);\r\n  const [thread, setThread] = useState<ThreadObject>(defaultThread);\r\n\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const { communityName, id } = useParams<{\r\n    communityName: string;\r\n    id: string;\r\n  }>();\r\n  const hist = useHistory();\r\n  const [topLevelPosts, setTopLevelPosts] = useState<PostObj[]>([]);\r\n  const [newPostObj, setNewPostObj] = useState<PostObj | null>(null);\r\n  const [postToReload, setPostToReload] = useContext(PostContext).voteReload;\r\n  const [deletedPost, setDeletedPost] = useContext(PostContext).deleteReload;\r\n\r\n  /** Loads the thread. */\r\n  async function loadThread() {\r\n    const res = await fetch(`${server}getThread/${id}`);\r\n    const jsoned: ThreadObject = await res.json();\r\n\r\n    // thread doesn't exist or error in retrieving it\r\n    if (jsoned.hasOwnProperty(\"error\")) {\r\n      // redirect to home\r\n      hist.push(\"/home\");\r\n      return;\r\n    }\r\n\r\n    if (JSON.stringify(jsoned) !== JSON.stringify(thread)) {\r\n      setThread(jsoned);\r\n      // // get top level posts\r\n      setTopLevelPosts([]);\r\n      for (const post of jsoned.posts) {\r\n        if (post.parentID === null) {\r\n          setTopLevelPosts((current) => [...current, post]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Deletes the thread. */\r\n  async function deleteThread() {\r\n    // TODO are u sure\r\n    const res = await fetch(`${server}deleteThread/${communityName}/${id}`);\r\n    // console.log(res.json());\r\n\r\n    // redirect to home\r\n    hist.push(`/c/${communityName}`);\r\n  }\r\n\r\n  /** Renders possible actions for owner of a thread. */\r\n  function renderOwnerActions() {\r\n    if (thread.username === username) {\r\n      return (\r\n        <IconContext.Provider value={{ size: \"1em\" }}>\r\n          <ImCross\r\n            onClick={deleteThread}\r\n            style={{ cursor: \"pointer\", minWidth: \"15px\" }}\r\n            className=\"ml-2\"\r\n          />\r\n        </IconContext.Provider>\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Gets a post by it's id */\r\n  function getPostByID(postID: string): PostObj | null {\r\n    // console.log(postID);\r\n    for (const post of thread.posts) {\r\n      if (post.id === postID) {\r\n        // console.log(post);\r\n        return post;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // load all the posts for given thread\r\n  useEffect(() => {\r\n    loadThread();\r\n    // temp socket io\r\n    socket.connect();\r\n    socket.emit(\"onThread\", id);\r\n    socket.on(\"newPost\", (newPost: PostObj) => {\r\n      // store new post somewhere\r\n\r\n      // is top level\r\n      if (newPost.parentID === null) {\r\n        console.log(\"new top level post\");\r\n        setTopLevelPosts((current) => [...current, newPost]);\r\n        // TODO https://dev.to/otamnitram/react-useeffect-cleanup-how-and-when-to-use-it-2hbm\r\n      } else {\r\n        setNewPostObj(newPost);\r\n      }\r\n    });\r\n    // post had its votes changed, reload\r\n    socket.on(\"upvotePost\", (postID) => {\r\n      setPostToReload(postID);\r\n    });\r\n    // post deletion\r\n    socket.on(\"postDeleted\", (postID) => {\r\n      setDeletedPost(postID);\r\n    });\r\n\r\n    // cleanup\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  // TODO if posts are empty, say no posts\r\n  return (\r\n    <div className=\"container mt-3 mb-5\">\r\n      <div className=\"row\">\r\n        <div className=\"col d-inline-flex align-items-center\">\r\n          <h1 className=\"mb-0\">{thread.title}</h1>\r\n          {renderOwnerActions()}\r\n        </div>\r\n      </div>\r\n      <h6>- {thread.username}</h6>\r\n      <p style={{ wordWrap: \"break-word\" }}>{thread.content}</p>\r\n      <AddPost threadID={id} loadThread={loadThread} />\r\n      <h4 className=\"mt-5\">Replies:</h4>\r\n      <div className=\"container \">\r\n        {topLevelPosts.map((post, index) => (\r\n          <Post\r\n            key={index}\r\n            postID={post.id}\r\n            threadID={id}\r\n            loadThread={loadThread}\r\n            getPost={getPostByID}\r\n            indentLevel={0}\r\n            newPost={newPostObj}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Thread;\r\n","import { useState } from \"react\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nconst Register = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const history = useHistory();\r\n  /** Checks if the passwords are the same. */\r\n  function checkPasswordsSame() {\r\n    if (password === confirmPassword) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /** Registers the user. */\r\n  async function registerUser(\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ) {\r\n    e.preventDefault();\r\n    setError(\"\");\r\n    setStatus(\"\");\r\n\r\n    if (!checkPasswordsSame()) {\r\n      return;\r\n    }\r\n\r\n    const obj = {\r\n      username: username,\r\n      password: password,\r\n    };\r\n\r\n    // send off to server\r\n    const url = server + \"register\";\r\n    try {\r\n      const result = await fetch(url, {\r\n        body: JSON.stringify(obj),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n      });\r\n      const response = await result.json();\r\n\r\n      if (response.hasOwnProperty(\"error\")) {\r\n        setError(response.error);\r\n        // setStatus(response.error)\r\n        return;\r\n      }\r\n\r\n      setStatus(response.status);\r\n\r\n      // delay before redirect\r\n      await new Promise((r) => setTimeout(r, 1500));\r\n\r\n      // redirect to home\r\n      history.push(\"/login\");\r\n\r\n      // TODO if it fails??\r\n      // console.log(response);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-12 col-sm-8 offset-sm-2 col-xl-6 offset-xl-3\">\r\n          <form className=\"mt-5\">\r\n            <h1 className=\"mb-4 text-center\">Register</h1>\r\n            <div className=\"form-group mb-2\">\r\n              <label>Username</label>\r\n              <input\r\n                type=\"text\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n                className=\"form-control\"\r\n                placeholder=\"Enter username\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group mb-2\">\r\n              <label>Password</label>\r\n              <input\r\n                type=\"password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                className=\"form-control\"\r\n                placeholder=\"Enter password\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group mb-3\">\r\n              <label>Confirm Password</label>\r\n              <input\r\n                type=\"password\"\r\n                value={confirmPassword}\r\n                onChange={(e) => setConfirmPassword(e.target.value)}\r\n                className=\"form-control\"\r\n                placeholder=\"Enter password\"\r\n              />\r\n            </div>\r\n            <button\r\n              type=\"submit\"\r\n              onClick={(e) => registerUser(e)}\r\n              className=\"btn btn-primary\"\r\n            >\r\n              Submit\r\n            </button>\r\n          </form>\r\n          <Link to=\"/login\">\r\n            <div className=\"mt-1\">Already registered? Click here to login!</div>\r\n          </Link>\r\n          {status.length > 0 && (\r\n            <h5 className=\"mt-3 alert alert-success\">{status}</h5>\r\n          )}\r\n          {error.length > 0 && (\r\n            <h5 className=\"mt-3 alert alert-danger\">{error}</h5>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import { useState, useContext } from \"react\";\r\nimport { UserContext } from \"../Home/UserContext\";\r\n\r\ninterface Props {\r\n  communityName: string;\r\n}\r\n\r\ninterface NewThread {\r\n  username: string;\r\n  content: string;\r\n  title: string;\r\n  communityName: string;\r\n}\r\n\r\nconst MAX_THREAD_TITLE_LENGTH = 150;\r\nconst MAX_THREAD_CONTENT_LENGTH = 5000;\r\n\r\nconst AddThread = ({ communityName }: Props) => {\r\n  const [addThreadOn, setAddThreadOn] = useState<boolean>(false);\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const [content, setContent] = useState<string>(\"\");\r\n  const [title, setTitle] = useState<string>(\"\");\r\n  const { username } = useContext(UserContext);\r\n\r\n  // the error message if needed\r\n  const [status, setStatus] = useState<string>(\"\");\r\n\r\n  /** Checks if the thread is valid. */\r\n  function checkThreadValidity() {\r\n    if (content.length > MAX_THREAD_CONTENT_LENGTH) {\r\n      setStatus(\"Exceeded content length!\");\r\n      return false;\r\n    }\r\n\r\n    if (title.length > MAX_THREAD_TITLE_LENGTH) {\r\n      setStatus(\"Exceeded title length!\");\r\n      return false;\r\n    }\r\n\r\n    setStatus(\"\");\r\n    return true;\r\n  }\r\n\r\n  /** Makes a post to the server */\r\n  async function makeThread() {\r\n    // error checking\r\n    if (!checkThreadValidity()) return;\r\n\r\n    const thread: NewThread = {\r\n      username: username,\r\n      content: content,\r\n      title: title,\r\n      communityName: communityName,\r\n    };\r\n\r\n    try {\r\n      const result = await fetch(server + \"newThread\", {\r\n        body: JSON.stringify(thread),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n      });\r\n      setAddThreadOn((current) => !current);\r\n    } catch (error) {\r\n      // TODO error handling\r\n    }\r\n  }\r\n\r\n  /** The error message to be displayed. */\r\n  function errorMessage() {\r\n    if (status.length === 0) return;\r\n\r\n    return <h5 className=\"alert alert-danger mt-2\">{status}</h5>;\r\n  }\r\n\r\n  /** Renders the input form if needed */\r\n  function inputForm() {\r\n    if (addThreadOn) {\r\n      return (\r\n        <div className=\"form-group mt-4\">\r\n          <label className=\"\">Title</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n          <label className=\"\">Content</label>\r\n          <textarea\r\n            onChange={(e) => setContent(e.target.value)}\r\n            className=\"form-control border border-secondary\"\r\n          />\r\n          <button onClick={makeThread} className=\"btn btn-primary mt-2\">\r\n            Submit\r\n          </button>\r\n          {errorMessage()}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <button\r\n        className=\"btn btn-primary\"\r\n        onClick={() => setAddThreadOn((current) => !current)}\r\n      >\r\n        Add Thread\r\n      </button>\r\n    );\r\n  }\r\n\r\n  return <div className=\"mb-5\">{inputForm()}</div>;\r\n};\r\n\r\nexport default AddThread;\r\n","import { useHistory, Link } from \"react-router-dom\";\r\nimport { ThreadObject } from \"../Thread/Thread\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\ninterface Props {\r\n  threadID: string;\r\n  communityName: string;\r\n}\r\n\r\nconst CONTENT_MAX_LEN = 500;\r\n\r\nconst ThreadCard = ({ threadID, communityName }: Props) => {\r\n  const history = useHistory();\r\n  const [content, setContent] = useState<string>(\"\");\r\n  const [title, setTitle] = useState<string>(\"\");\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n\r\n  /** Truncates text if necessary */\r\n  function truncatedText() {\r\n    if (content.length > CONTENT_MAX_LEN) {\r\n      return content.substring(1, 500) + \"...\";\r\n    }\r\n\r\n    return content;\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    (async () => {\r\n      const resp = await fetch(server + \"/getThread/\" + threadID);\r\n      const jsoned = await resp.json();\r\n      if (mounted) {\r\n        setContent(jsoned.content);\r\n        setTitle(jsoned.title);\r\n      }\r\n    })();\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, []);\r\n\r\n  // TODO limit post length, client side and server side\r\n  return (\r\n    <Link to={`/c/${communityName}/${threadID}`}>\r\n      <div className=\"border border-primary rounded my-2 p-2\">\r\n        <h4>{title}</h4>\r\n        <p style={{ wordWrap: \"break-word\" }}>{truncatedText()}</p>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default ThreadCard;\r\n","import { useState, useEffect, useRef } from \"react\";\r\nimport AddThread from \"./AddThread\";\r\nimport ThreadCard from \"./ThreadCard\";\r\nimport { ThreadObject } from \"../Thread/Thread\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport io from \"socket.io-client\";\r\nconst SOCKET_SERVER: any = process.env.REACT_APP_SOCKET_SERVER;\r\nconst socket = io(SOCKET_SERVER);\r\n\r\nconst Home = () => {\r\n  const [threads, setThreads] = useState<string[]>([]);\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const { communityName } = useParams<{ communityName: string }>();\r\n  const [error, setError] = useState(\"\");\r\n\r\n  // stateRef.current = threads;\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    (async () => {\r\n      const threads = await fetch(server + \"getThreads/\" + communityName);\r\n      const jsoned = await threads.json();\r\n      if (!mounted) {\r\n        return;\r\n      }\r\n      if (!threads) {\r\n        setError(\"Sorry! this page doesn't exist.\");\r\n      }\r\n      if (mounted) {\r\n        setThreads(jsoned.threads);\r\n      }\r\n    })();\r\n\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, [communityName]);\r\n\r\n  // load all the posts for given thread\r\n  useEffect(() => {\r\n    // temp socket io\r\n    socket.connect();\r\n    socket.emit(\"onCommunity\", communityName);\r\n    socket.on(\"newThread\", (newThread: ThreadObject) => {\r\n      setThreads((current) => {\r\n        if (!current.includes(newThread._id)) {\r\n          return [...current, newThread._id];\r\n        }\r\n        return current;\r\n      });\r\n    });\r\n\r\n    socket.on(\"deletedThread\", (threadID: string) => {\r\n      setThreads((current) => current.filter((x) => x !== threadID));\r\n    });\r\n\r\n    // cleanup\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, [communityName, threads]);\r\n\r\n  // error message\r\n  function renderError() {\r\n    if (error !== \"\") {\r\n      return (\r\n        <h1 className=\"alert alert-danger\">Sorry something went wrong!</h1>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"font-weight-bold my-3\">{communityName}</h1>\r\n      {error === \"\" &&\r\n        threads.map((thread) => (\r\n          <ThreadCard\r\n            key={thread}\r\n            threadID={thread}\r\n            communityName={communityName}\r\n          />\r\n        ))}\r\n      {renderError()}\r\n      {error === \"\" && <AddThread communityName={communityName} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useEffect, useState } from \"react\";\r\nimport Fuzzy from \"fuzzy\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ninterface CommunityStub {\r\n  _id: string;\r\n  communityName: string;\r\n  description: string;\r\n}\r\n\r\nconst Mainpage = () => {\r\n  const [communitites, setCommunities] = useState<CommunityStub[]>([]);\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [renderedCommunities, setRenderedCommunities] = useState<string[]>([]);\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n\r\n  useEffect(() => {\r\n    // fetch communities\r\n    (async () => {\r\n      const resp = await fetch(`${server}/getCommunities`);\r\n      const jsoned = await resp.json();\r\n\r\n      setCommunities(jsoned);\r\n      setRenderedCommunities(\r\n        jsoned.map((community: CommunityStub) => community.communityName)\r\n      );\r\n    })();\r\n    searchCommunities(\"\");\r\n  }, []);\r\n\r\n  /** Searches the communities for the given search term. */\r\n  function searchCommunities(searchText: string) {\r\n    setSearchValue(searchText);\r\n    if (searchText === \"\") {\r\n      setRenderedCommunities(\r\n        communitites.map((community) => community.communityName)\r\n      );\r\n      setError(\"\");\r\n      return;\r\n    }\r\n    const results = Fuzzy.filter(searchText, communitites, {\r\n      extract: (item) => item.communityName,\r\n    });\r\n    setRenderedCommunities(results.map((item) => item.string));\r\n\r\n    // no matches\r\n    if (results.length === 0) {\r\n      setError(\"No matching communities could be found!\");\r\n    } else {\r\n      setError(\"\");\r\n    }\r\n  }\r\n\r\n  /** Renders the error message */\r\n  function renderError() {\r\n    if (error !== \"\") {\r\n      return <h3 className=\"alert alert-danger\">{error}</h3>;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-5 text-center\">\r\n      <h1>this is main page</h1>\r\n      <p>Search for a community or click on one to visit it</p>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          className=\"w-75\"\r\n          onChange={(e) => searchCommunities(e.target.value)}\r\n          value={searchValue}\r\n        ></input>\r\n      </div>\r\n      <div className=\"row d-flex mt-4 flex-row text-left mx-5\">\r\n        {renderedCommunities.map((community) => (\r\n          <Link key={community} to={\"/c/\" + community}>\r\n            <div className=\"mx-2 \">\r\n              <h4>{community}</h4>\r\n            </div>\r\n          </Link>\r\n        ))}\r\n      </div>\r\n      {renderError()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Mainpage;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst CommunityBanner = () => {\r\n  return (\r\n    <div className=\"container-fluid bg-info\">\r\n      <h1>CommunityNamegoeshere</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CommunityBanner;\r\n","import Header from \"./Boiler/Header\";\nimport Footer from \"./Boiler/Footer\";\nimport Login from \"./UserAuth/Login\";\nimport Thread from \"./Thread/Thread\";\nimport Register from \"./UserAuth/Register\";\nimport Home from \"./Community/Home\";\nimport { useState } from \"react\";\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport { UserContext } from \"./Home/UserContext\";\nimport { PostContext } from \"./Home/PostContext\";\nimport Mainpage from \"./Home/MainPage\";\nimport CommunityBanner from \"./Community/CommunityBanner\";\n\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n  const [postToReload, setPostToReload] = useState<string | null>(null);\n  const [deletedPost, setDeletedPost] = useState<string | null>(null);\n\n  return (\n    <Router basename=\"/\">\n      <UserContext.Provider value={{ username, setUsername }}>\n        <Header />\n        <Switch>\n          <Route path=\"/register\">\n            <Register />\n          </Route>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/c/:communityName/:id\">\n            <PostContext.Provider\n              value={{\n                voteReload: [postToReload, setPostToReload],\n                deleteReload: [deletedPost, setDeletedPost],\n              }}\n            >\n              <CommunityBanner />\n              <Thread />\n            </PostContext.Provider>\n          </Route>\n          <Route path=\"/c/:communityName\">\n            <CommunityBanner />\n            <Home />\n          </Route>\n          <Route path=\"/home\">\n            <Mainpage />\n          </Route>\n          <Route path=\"/\">\n            <Login />\n          </Route>\n        </Switch>\n        <Footer />\n      </UserContext.Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}