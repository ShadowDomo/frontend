{"version":3,"sources":["UserContext.tsx","NavBarProfile.tsx","NavBar.tsx","Header.tsx","Footer.tsx","Login.tsx","Post.tsx","AddPost.tsx","Thread.tsx","Register.tsx","AddThread.tsx","ThreadCard.tsx","Home.jsx","App.tsx","index.js"],"names":["UserContext","createContext","NavBarProfile","server","process","useContext","username","setUsername","history","useHistory","location","useLocation","a","sessionID","localStorage","getItem","fetch","result","json","jsoned","includes","pathname","push","useEffect","getUsername","className","to","onClick","removeItem","length","renderRegister","NavBar","Header","Footer","style","position","bottom","Login","useState","password","setPassword","status","setStatus","setUsernameAlias","e","preventDefault","obj","body","JSON","stringify","headers","method","response","hasOwnProperty","error","setItem","console","log","type","value","onChange","target","placeholder","Post","post","content","date","AddPost","threadID","loadThread","addPostOn","setAddPostOn","setContent","makePost","Date","toLocaleString","current","Thread","title","_id","posts","thread","setThread","id","useParams","res","map","index","Register","confirmPassword","setConfirmPassword","setError","checkPasswordsSame","Promise","r","setTimeout","registerUser","AddThread","loadThreads","addThreadOn","setAddThreadOn","setTitle","makeThread","ThreadCard","Home","threads","setThreads","App","basename","Provider","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44183b95.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const UserContext = createContext<any>(null);\r\n","import { useContext } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport { UserContext } from \"./UserContext\";\r\n\r\nconst NavBarProfile = () => {\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const { username, setUsername } = useContext(UserContext);\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  async function getUsername() {\r\n    const sessionID = localStorage.getItem(\"sessionID\");\r\n    try {\r\n      const result = await fetch(server + \"getUsername/\" + sessionID);\r\n      const jsoned = await result.json();\r\n\r\n      // redirect to login if not logged in\r\n      if (\r\n        !jsoned.username &&\r\n        ![\"/login\", \"/register\"].includes(location.pathname)\r\n      ) {\r\n        history.push(\"/login\");\r\n        return;\r\n      }\r\n      setUsername(jsoned.username);\r\n    } catch (error) {\r\n      // TODO\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getUsername();\r\n  }, []);\r\n\r\n  /** Logs the user out. */\r\n  function logout() {\r\n    localStorage.removeItem(\"sessionID\");\r\n    setUsername(\"\");\r\n  }\r\n\r\n  /** Render logout button if logged in */\r\n  function renderLogoutConditionally() {\r\n    // if logged in\r\n    if (username && username.length > 0) {\r\n      return <h5 className=\"text-primary\">logout</h5>;\r\n    }\r\n\r\n    if (location.pathname === \"/register\") {\r\n      return <h5>Login</h5>;\r\n    }\r\n  }\r\n\r\n  /** Render Register button if not logged in */\r\n  function renderRegister() {\r\n    if (location.pathname === \"/register\") {\r\n      return;\r\n    }\r\n\r\n    // if logged out and not on register page\r\n    if (!username) {\r\n      return <h5 className=\"font-weight-bold\">Register</h5>;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h6 className=\"text-white\">{username}</h6>\r\n      <div className=\"d-flex flex-row\">\r\n        <Link className=\"mr-3\" to=\"/login\" onClick={logout}>\r\n          {renderLogoutConditionally()}\r\n        </Link>\r\n        <Link to=\"/register\">{renderRegister()}</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBarProfile;\r\n","import { Link } from \"react-router-dom\";\r\nimport NavBarProfile from \"./NavBarProfile\";\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <div className=\"bg-dark navbar w-100 static-top\">\r\n      <Link to=\"/home\">\r\n        <h1 className=\"navbar-brand mx-3 text-light\">TEMPORARYNAMEgay</h1>\r\n      </Link>\r\n\r\n      <NavBarProfile />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import NavBar from \"./NavBar\";\r\nimport { createContext, useState } from \"react\";\r\n\r\n// interface UserContextType {\r\n//   username: string | null;\r\n//   setUsername: React.Dispatch<React.SetStateAction<string>>;\r\n// }\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","\r\nconst Footer = () => {\r\n  return (\r\n    <div className='bg-dark w-100' style={{ position: 'fixed', bottom: 0 }}>\r\n      <h6 className='text-light m-2'>I am footer</h6>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Footer\r\n","import React, { useState, useContext } from \"react\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { UserContext } from \"./UserContext\";\r\n\r\nconst Login: React.FC = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const history = useHistory();\r\n  const { username: usernameAlias, setUsername: setUsernameAlias } = useContext(\r\n    UserContext\r\n  );\r\n\r\n  // TODO display login status in navbar\r\n  // TODO if sessionID set, then redirect?\r\n  // TODO put server globally somewhere\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n\r\n  async function login(e: React.MouseEvent) {\r\n    e.preventDefault();\r\n\r\n    const obj = {\r\n      username: username,\r\n      password: password,\r\n    };\r\n\r\n    // send off to server\r\n    const url = server + \"login\";\r\n    try {\r\n      const result = await fetch(url, {\r\n        body: JSON.stringify(obj),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n      });\r\n      const response = await result.json();\r\n\r\n      if (response.hasOwnProperty(\"error\")) {\r\n        setStatus(response.error);\r\n        return;\r\n      }\r\n      localStorage.setItem(\"sessionID\", response.sessionID);\r\n      setUsernameAlias(username);\r\n      history.push(\"/\");\r\n\r\n      // TODO redirect to home\r\n    } catch (err) {\r\n      // TODO if it fails??\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-12 col-sm-8 offset-sm-2 col-xl-6 offset-xl-3\">\r\n          <form className=\"mt-5\">\r\n            <h1 className=\"mb-4 text-center\">Login</h1>\r\n            <div className=\"form-group mb-2\">\r\n              <label>Username</label>\r\n              <input\r\n                type=\"text\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n                className=\"form-control\"\r\n                placeholder=\"Enter username\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group mb-3\">\r\n              <label>Password</label>\r\n              <input\r\n                type=\"password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                className=\"form-control\"\r\n                placeholder=\"Enter password\"\r\n              />\r\n            </div>\r\n            <button type=\"submit\" onClick={login} className=\"btn btn-primary\">\r\n              Submit\r\n            </button>\r\n          </form>\r\n          <Link to=\"/register\">\r\n            <div className=\"mt-1\">New user? Click here to register!</div>\r\n          </Link>\r\n          {status.length > 0 && (\r\n            <h5 className=\"mt-3 alert alert-danger\">{status}</h5>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { PostObj } from \"./Thread\";\r\n\r\ninterface Props {\r\n  post: PostObj;\r\n}\r\n\r\n// TODO format date properly\r\n\r\nconst Post = ({ post }: Props) => {\r\n  return (\r\n    <div className=\"container my-3 border border-secondary rounded bg-dark\">\r\n      <div className=\"row p-2\">\r\n        {<p className=\"text-white\">{post.content}</p>}\r\n      </div>\r\n      <div className=\"row pl-2\">\r\n        {<h6 className=\"text-white\">-{post.username}</h6>}\r\n        {<h6 className=\"ml-3 text-white\">{post.date}</h6>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import { useState, useContext } from \"react\";\r\nimport { UserContext } from \"./UserContext\";\r\ninterface Props {\r\n  threadID: string;\r\n  loadThread: () => void;\r\n}\r\n\r\ninterface Post {\r\n  username: string;\r\n  content: string;\r\n  date: string;\r\n  threadID: string;\r\n}\r\n\r\nconst AddPost = ({ threadID, loadThread }: Props) => {\r\n  const [addPostOn, setAddPostOn] = useState<boolean>(false);\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const [content, setContent] = useState<string>(\"\");\r\n  const { username } = useContext(UserContext);\r\n\r\n  /** Makes a post to the server */\r\n  async function makePost() {\r\n    const post: Post = {\r\n      username: username, // username temp\r\n      content: content,\r\n      date: new Date().toLocaleString(),\r\n      threadID: threadID,\r\n    };\r\n\r\n    try {\r\n      const result = await fetch(server + \"makePost\", {\r\n        body: JSON.stringify(post),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n      });\r\n      const response = await result.json();\r\n      loadThread();\r\n      setAddPostOn((current) => !current);\r\n    } catch (error) {\r\n      // TODO error handling\r\n    }\r\n  }\r\n\r\n  /** Renders the input form if needed */\r\n  function inputForm() {\r\n    if (addPostOn) {\r\n      return (\r\n        <div className=\"form-group mt-4\">\r\n          <label className=\"\">Content</label>\r\n          <textarea\r\n            onChange={(e) => setContent(e.target.value)}\r\n            className=\"form-control border border-secondary\"\r\n          />\r\n          <button onClick={makePost} className=\"btn btn-primary mt-2\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <button\r\n        className=\"btn btn-primary\"\r\n        onClick={() => setAddPostOn((current) => !current)}\r\n      >\r\n        Add Post\r\n      </button>\r\n    );\r\n  }\r\n\r\n  return <div className=\"mb-5\">{inputForm()}</div>;\r\n};\r\n\r\nexport default AddPost;\r\n","import { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Post from \"./Post\";\r\nimport AddPost from \"./AddPost\";\r\n\r\nexport interface PostObj {\r\n  username: string;\r\n  content: string;\r\n  date: string; // TODO change\r\n}\r\n\r\nexport interface ThreadObject {\r\n  title: string;\r\n  username: string;\r\n  content: string;\r\n  _id: string;\r\n  posts: PostObj[];\r\n}\r\n\r\n// TODO on making thread, if no username, then anonymous\r\n// TODO logged in username displayed\r\n// TODO make new threads\r\n// TODO make new posts on thread\r\n// TODO if your own post / thread, you can delete\r\nconst Thread = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const defaultThread: ThreadObject = {\r\n    title: \"\",\r\n    content: \"\",\r\n    username: \"\",\r\n    _id: \"\",\r\n    posts: [],\r\n  };\r\n\r\n  const [thread, setThread] = useState<ThreadObject>(defaultThread);\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const { id } = useParams<{ id: string }>();\r\n\r\n  async function loadThread() {\r\n    const res = await fetch(server + \"getThread/\" + id);\r\n    const jsoned = await res.json();\r\n    setThread(jsoned);\r\n  }\r\n\r\n  // load all the posts for given thread\r\n  useEffect(() => {\r\n    loadThread();\r\n  }, []);\r\n\r\n  // TODO if posts are empty, say no posts\r\n  return (\r\n    <div className=\"container mt-3\">\r\n      <h1>{thread.title}</h1>\r\n      <h6>- {thread.username}</h6>\r\n      <p>{thread.content}</p>\r\n      <h4 className=\"mt-5\">Replies:</h4>\r\n\r\n      {thread.posts.map((post, index) => (\r\n        <Post key={index} post={post} />\r\n      ))}\r\n      <AddPost threadID={id} loadThread={loadThread} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Thread;\r\n","import { useState } from \"react\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nconst Register = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const history = useHistory();\r\n  /** Checks if the passwords are the same. */\r\n  function checkPasswordsSame() {\r\n    if (password === confirmPassword) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /** Registers the user. */\r\n  async function registerUser(\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ) {\r\n    e.preventDefault();\r\n    setError(\"\");\r\n    setStatus(\"\");\r\n\r\n    if (!checkPasswordsSame()) {\r\n      return;\r\n    }\r\n\r\n    const obj = {\r\n      username: username,\r\n      password: password,\r\n    };\r\n\r\n    // send off to server\r\n    const url = server + \"register\";\r\n    try {\r\n      const result = await fetch(url, {\r\n        body: JSON.stringify(obj),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n      });\r\n      const response = await result.json();\r\n\r\n      if (response.hasOwnProperty(\"error\")) {\r\n        setError(response.error);\r\n        // setStatus(response.error)\r\n        return;\r\n      }\r\n\r\n      setStatus(response.status);\r\n\r\n      // delay before redirect\r\n      await new Promise((r) => setTimeout(r, 1500));\r\n\r\n      // redirect to home\r\n      history.push(\"/login\");\r\n\r\n      // TODO if it fails??\r\n      console.log(response);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-12 col-sm-8 offset-sm-2 col-xl-6 offset-xl-3\">\r\n          <form className=\"mt-5\">\r\n            <h1 className=\"mb-4 text-center\">Register</h1>\r\n            <div className=\"form-group mb-2\">\r\n              <label>Username</label>\r\n              <input\r\n                type=\"text\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n                className=\"form-control\"\r\n                placeholder=\"Enter username\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group mb-2\">\r\n              <label>Password</label>\r\n              <input\r\n                type=\"password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                className=\"form-control\"\r\n                placeholder=\"Enter password\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group mb-3\">\r\n              <label>Confirm Password</label>\r\n              <input\r\n                type=\"password\"\r\n                value={confirmPassword}\r\n                onChange={(e) => setConfirmPassword(e.target.value)}\r\n                className=\"form-control\"\r\n                placeholder=\"Enter password\"\r\n              />\r\n            </div>\r\n            <button\r\n              type=\"submit\"\r\n              onClick={(e) => registerUser(e)}\r\n              className=\"btn btn-primary\"\r\n            >\r\n              Submit\r\n            </button>\r\n          </form>\r\n          <Link to=\"/login\">\r\n            <div className=\"mt-1\">Already registered? Click here to login!</div>\r\n          </Link>\r\n          {status.length > 0 && (\r\n            <h5 className=\"mt-3 alert alert-success\">{status}</h5>\r\n          )}\r\n          {error.length > 0 && (\r\n            <h5 className=\"mt-3 alert alert-danger\">{error}</h5>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import { useState, useContext } from \"react\";\r\nimport { UserContext } from \"./UserContext\";\r\n\r\ninterface Props {\r\n  threadID: string;\r\n  loadThreads: () => void;\r\n}\r\n\r\ninterface NewThread {\r\n  username: string;\r\n  content: string;\r\n  title: string;\r\n}\r\n\r\nconst AddThread = ({ threadID, loadThreads }: Props) => {\r\n  const [addThreadOn, setAddThreadOn] = useState<boolean>(false);\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const [content, setContent] = useState<string>(\"\");\r\n  const [title, setTitle] = useState<string>(\"\");\r\n  const { username } = useContext(UserContext);\r\n\r\n  /** Makes a post to the server */\r\n  async function makeThread() {\r\n    const thread: NewThread = {\r\n      username: username,\r\n      content: content,\r\n      title: title,\r\n    };\r\n\r\n    try {\r\n      const result = await fetch(server + \"newThread\", {\r\n        body: JSON.stringify(thread),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n      });\r\n      const response = await result.json();\r\n      loadThreads();\r\n      setAddThreadOn((current) => !current);\r\n    } catch (error) {\r\n      // TODO error handling\r\n    }\r\n  }\r\n\r\n  /** Renders the input form if needed */\r\n  function inputForm() {\r\n    if (addThreadOn) {\r\n      return (\r\n        <div className=\"form-group mt-4\">\r\n          <label className=\"\">Title</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n          <label className=\"\">Content</label>\r\n          <textarea\r\n            onChange={(e) => setContent(e.target.value)}\r\n            className=\"form-control border border-secondary\"\r\n          />\r\n          <button onClick={makeThread} className=\"btn btn-primary mt-2\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <button\r\n        className=\"btn btn-primary\"\r\n        onClick={() => setAddThreadOn((current) => !current)}\r\n      >\r\n        Add Thread\r\n      </button>\r\n    );\r\n  }\r\n\r\n  return <div className=\"mb-5\">{inputForm()}</div>;\r\n};\r\n\r\nexport default AddThread;\r\n","import { useHistory, Link } from \"react-router-dom\";\r\nimport { ThreadObject } from \"./Thread\";\r\n\r\ninterface Props {\r\n  thread: ThreadObject;\r\n}\r\n\r\nconst ThreadCard = ({ thread }: Props) => {\r\n  const id = thread._id;\r\n  const title = thread.title;\r\n  const content = thread.content;\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <Link to={`/thread/${id}`}>\r\n      <div className=\"border border-primary rounded my-2 p-2\">\r\n        <h4>{title}</h4>\r\n        <p>{content}</p>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default ThreadCard;\r\n","import { useState, useEffect } from \"react\";\r\nimport AddThread from \"./AddThread\";\r\nimport ThreadCard from \"./ThreadCard\";\r\n\r\nconst Home = () => {\r\n  const [threads, setThreads] = useState([]);\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n\r\n  async function loadThreads() {\r\n    const res = await fetch(server + \"getThreads\");\r\n    const jsoned = await res.json();\r\n    setThreads(jsoned);\r\n  }\r\n\r\n  // TODO search for posts\r\n  useEffect(() => {\r\n    loadThreads();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"font-weight-bold my-3\">Home page</h1>\r\n      {threads.map((thread) => (\r\n        <ThreadCard key={thread._id} thread={thread} />\r\n      ))}\r\n      <AddThread loadThreads={loadThreads} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Login from \"./Login\";\nimport Thread from \"./Thread\";\nimport Register from \"./Register\";\nimport Home from \"./Home\";\nimport { useState } from \"react\";\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport { UserContext } from \"./UserContext\";\n\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n\n  return (\n    <Router basename=\"/\">\n      <UserContext.Provider value={{ username, setUsername }}>\n        <Header />\n        <Switch>\n          <Route path=\"/register\">\n            <Register />\n          </Route>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/thread/:id\">\n            <Thread />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n        <Footer />\n      </UserContext.Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}