{"version":3,"sources":["Home/UserContext.tsx","Boiler/NavBarProfile.tsx","Boiler/NavBar.tsx","Boiler/Header.tsx","Boiler/Footer.tsx","UserAuth/Login.tsx","Thread/AddPost.tsx","Thread/Post.tsx","Thread/Thread.tsx","UserAuth/Register.tsx","Home/AddThread.tsx","Home/ThreadCard.tsx","Home/Home.tsx","App.tsx","index.js"],"names":["UserContext","createContext","NavBarProfile","server","process","useContext","username","setUsername","history","useHistory","location","useLocation","a","undefined","sessionID","localStorage","getItem","fetch","result","json","jsoned","includes","pathname","push","useEffect","console","log","removeItem","getUsername","className","to","onClick","length","renderRegister","NavBar","Header","Footer","style","position","bottom","Login","useState","password","setPassword","status","setStatus","setUsernameAlias","e","preventDefault","obj","body","JSON","stringify","headers","method","response","hasOwnProperty","error","setItem","type","value","onChange","target","placeholder","AddPost","threadID","loadThread","noRenderButton","parentPostID","setRenderReplyForm","addPostOn","setAddPostOn","content","setContent","imageURL","setImageURL","makePost","post","date","Date","toLocaleString","childrenIDs","parentID","current","cancelHandler","rows","Post","getPost","indentLevel","renderReplyForm","renderChildren","setRenderChildren","padding","marginLeft","width","deleted","maxWidth","height","src","alt","renderImage","cursor","prev","id","renderReply","map","childPost","Thread","title","_id","posts","thread","setThread","useParams","hist","topLevelPosts","setTopLevelPosts","res","deleteThread","getPostByID","postID","Provider","size","renderOwnerActions","wordWrap","index","Register","confirmPassword","setConfirmPassword","setError","checkPasswordsSame","Promise","r","setTimeout","registerUser","AddThread","loadThreads","addThreadOn","setAddThreadOn","setTitle","makeThread","ThreadCard","substring","Home","threads","setThreads","App","basename","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1b3167c.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const UserContext = createContext<any>(null);\r\n","import { useContext } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport { UserContext } from \"../Home/UserContext\";\r\n\r\nconst NavBarProfile = () => {\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const { username, setUsername } = useContext(UserContext);\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  async function getUsername() {\r\n    const sessionID = localStorage.getItem(\"sessionID\");\r\n\r\n    if (sessionID === undefined) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = await fetch(server + \"getUsername/\" + sessionID);\r\n      const jsoned = await result.json();\r\n      // redirect to login if not logged in\r\n      if (\r\n        !jsoned.username &&\r\n        ![\"/login\", \"/register\"].includes(location.pathname)\r\n      ) {\r\n        history.push(\"/login\");\r\n        return;\r\n      }\r\n      setUsername(jsoned.username);\r\n    } catch (error) {\r\n      history.push(\"/login\");\r\n    }\r\n  }\r\n\r\n  // useEffect(() => {}, []);\r\n\r\n  useEffect(() => {\r\n    // explicitly redirect to login for all non specified routes\r\n    if (location.pathname === \"/\") {\r\n      console.log(\"fixing\");\r\n      localStorage.removeItem(\"sessionID\");\r\n      history.push(\"/login\");\r\n      setUsername(\"\");\r\n      return;\r\n    }\r\n    getUsername();\r\n  }, [location.pathname]);\r\n\r\n  /** Logs the user out. */\r\n  function logout() {\r\n    localStorage.removeItem(\"sessionID\");\r\n    setUsername(\"\");\r\n  }\r\n\r\n  /** Render logout button if logged in */\r\n  function renderLogoutConditionally() {\r\n    // if logged in\r\n    if (username && username.length > 0) {\r\n      return <h5 className=\"text-primary\">logout</h5>;\r\n    }\r\n\r\n    if (location.pathname === \"/register\") {\r\n      return <h5>Login</h5>;\r\n    }\r\n  }\r\n\r\n  /** Render Register button if not logged in */\r\n  function renderRegister() {\r\n    if (location.pathname === \"/register\") {\r\n      return;\r\n    }\r\n\r\n    // if logged out and not on register page\r\n    if (!username) {\r\n      return <h5 className=\"font-weight-bold\">Register</h5>;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h6 className=\"text-white\">{username}</h6>\r\n      <div className=\"d-flex flex-row\">\r\n        <Link className=\"mr-3\" to=\"/login\" onClick={logout}>\r\n          {renderLogoutConditionally()}\r\n        </Link>\r\n        <Link to=\"/register\">{renderRegister()}</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBarProfile;\r\n","import { Link } from \"react-router-dom\";\r\nimport NavBarProfile from \"./NavBarProfile\";\r\n\r\nconst NavBar = () => {\r\n  /** Returns where the home button should redirect to. */\r\n  function allowedUrl(): string {\r\n    if (localStorage.getItem(\"sessionID\") === null) {\r\n      return \"#\";\r\n    }\r\n    return \"/home\";\r\n  }\r\n  return (\r\n    <div className=\"bg-dark navbar w-100 static-top\">\r\n      <Link to={allowedUrl}>\r\n        <h1 className=\"navbar-brand mx-3 text-light\">TEMPORARYNAMEgay</h1>\r\n      </Link>\r\n\r\n      <NavBarProfile />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import NavBar from \"./NavBar\";\r\nimport { createContext, useState } from \"react\";\r\n\r\n// interface UserContextType {\r\n//   username: string | null;\r\n//   setUsername: React.Dispatch<React.SetStateAction<string>>;\r\n// }\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","\r\nconst Footer = () => {\r\n  return (\r\n    <div className='bg-dark w-100' style={{ position: 'fixed', bottom: 0 }}>\r\n      <h6 className='text-light m-2'>I am footer</h6>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Footer\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { UserContext } from \"../Home/UserContext\";\r\n\r\nconst Login: React.FC = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const history = useHistory();\r\n  const usernameAlias = useContext(UserContext).username;\r\n  const setUsernameAlias = useContext(UserContext).setUsername;\r\n\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n\r\n  /** Logs the user in. */\r\n  async function login(e: React.MouseEvent) {\r\n    e.preventDefault();\r\n\r\n    const obj = {\r\n      username: username,\r\n      password: password,\r\n    };\r\n\r\n    // send off to server\r\n    const url = server + \"login\";\r\n    try {\r\n      const result = await fetch(url, {\r\n        body: JSON.stringify(obj),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n      });\r\n      const response = await result.json();\r\n\r\n      if (response.hasOwnProperty(\"error\")) {\r\n        setStatus(response.error);\r\n        return;\r\n      }\r\n      localStorage.setItem(\"sessionID\", response.sessionID);\r\n\r\n      // username already used locally, so need different var name\r\n      setUsernameAlias(username);\r\n      history.push(\"/home\");\r\n    } catch (err) {\r\n      setStatus(\"Failed to login. Please try again.\");\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // console.log(\"render login page\");\r\n    // // log user out if visit the page while logged in\r\n    // if (usernameAlias) {\r\n    //   localStorage.removeItem(\"sessionID\");\r\n    //   setUsernameAlias(\"\");\r\n    //   setUsername(\"\");\r\n    // }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-12 col-sm-8 offset-sm-2 col-xl-6 offset-xl-3\">\r\n          <form className=\"mt-5\">\r\n            <h1 className=\"mb-4 text-center\">Login</h1>\r\n            <div className=\"form-group mb-2\">\r\n              <label>Username</label>\r\n              <input\r\n                type=\"text\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n                className=\"form-control\"\r\n                placeholder=\"Enter username\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group mb-3\">\r\n              <label>Password</label>\r\n              <input\r\n                type=\"password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                className=\"form-control\"\r\n                placeholder=\"Enter password\"\r\n              />\r\n            </div>\r\n            <button type=\"submit\" onClick={login} className=\"btn btn-primary\">\r\n              Submit\r\n            </button>\r\n          </form>\r\n          <Link to=\"/register\">\r\n            <div className=\"mt-1\">New user? Click here to register!</div>\r\n          </Link>\r\n          {status.length > 0 && (\r\n            <h5 className=\"mt-3 alert alert-danger\">{status}</h5>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { useState, useContext, useEffect } from \"react\";\r\nimport { UserContext } from \"../Home/UserContext\";\r\n\r\ninterface Props {\r\n  // the current thread's ID\r\n  threadID: string;\r\n  loadThread: () => void;\r\n\r\n  // if false, then don't render the add post button\r\n  noRenderButton?: boolean;\r\n\r\n  // when in reply mode\r\n  parentPostID?: string;\r\n\r\n  // so we can remove the reply form component when post submitted\r\n  setRenderReplyForm?: React.Dispatch<React.SetStateAction<Boolean>>;\r\n}\r\n\r\ninterface PostRequest {\r\n  username: string;\r\n  content: string;\r\n  date: string;\r\n  threadID: string;\r\n  childrenIDs: string[]; // TODO maybe make server side\r\n  parentID?: string;\r\n  imageURL: string;\r\n}\r\n\r\nconst AddPost = ({\r\n  threadID,\r\n  loadThread,\r\n  noRenderButton,\r\n  parentPostID,\r\n  setRenderReplyForm,\r\n}: Props) => {\r\n  const [addPostOn, setAddPostOn] = useState<boolean>(false);\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const [content, setContent] = useState<string>(\"\");\r\n  const { username } = useContext(UserContext);\r\n  const [imageURL, setImageURL] = useState<string>(\"\");\r\n\r\n  useEffect(() => {\r\n    if (noRenderButton === undefined) {\r\n      setAddPostOn(false);\r\n    } else {\r\n      setAddPostOn(true);\r\n    }\r\n  }, []);\r\n\r\n  /** Makes a post to the server */\r\n  async function makePost() {\r\n    const post: PostRequest = {\r\n      username: username, // username temp\r\n      content: content,\r\n      date: new Date().toLocaleString(),\r\n      threadID: threadID,\r\n      childrenIDs: [],\r\n      parentID: parentPostID, // TODO if not reply, then parentID is ''\r\n      imageURL: imageURL,\r\n    };\r\n\r\n    try {\r\n      const result = await fetch(server + \"makePost\", {\r\n        body: JSON.stringify(post),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n      });\r\n      const response = await result.json();\r\n      loadThread();\r\n      setAddPostOn((current) => !current);\r\n    } catch (error) {\r\n      // TODO error handling\r\n      return;\r\n    }\r\n\r\n    cancelHandler();\r\n  }\r\n\r\n  /** Closes the form. */\r\n  function cancelHandler() {\r\n    setAddPostOn(false);\r\n    if (setRenderReplyForm) {\r\n      setRenderReplyForm(false);\r\n    }\r\n  }\r\n\r\n  /** Renders the add post form. */\r\n  function renderForm() {\r\n    return (\r\n      <div className=\"form-group mt-4 mb-5\">\r\n        <label className=\"\">Content</label>\r\n        <textarea\r\n          placeholder=\"What are your thoughts?\"\r\n          onChange={(e) => setContent(e.target.value)}\r\n          className=\"form-control border border-secondary\"\r\n          rows={6}\r\n        />\r\n        <div className=\"mt-3\">\r\n          <label>Image url</label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={(e) => setImageURL(e.target.value)}\r\n            className=\"form-control border border-secondary\"\r\n          />\r\n        </div>\r\n        <div className=\"d-flex flex-row justify-content-end\">\r\n          <button\r\n            onClick={(e) => cancelHandler()}\r\n            className=\"btn btn-primary mt-2\"\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            onClick={makePost}\r\n            className=\"btn btn-primary mt-2 ml-3 bg-secondary text-dark border border-secondary\"\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /** Renders the add post button. */\r\n  function renderButton() {\r\n    return (\r\n      <div>\r\n        <button\r\n          className=\"btn btn-primary\"\r\n          onClick={() => setAddPostOn((current) => !current)}\r\n        >\r\n          Add Reply\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {addPostOn && renderForm()}\r\n      {!addPostOn && !noRenderButton && renderButton()}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddPost;\r\n","import { PostObj } from \"./Thread\";\r\nimport AddPost from \"./AddPost\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\ninterface Props {\r\n  post: PostObj;\r\n  threadID: string;\r\n  loadThread: () => void;\r\n  getPost: (postID: string) => PostObj | null;\r\n  indentLevel: number;\r\n}\r\n\r\n// TODO format date properly\r\n\r\nconst Post = ({ post, threadID, loadThread, getPost, indentLevel }: Props) => {\r\n  // to find difference in date\r\n  // const currentTime = new Date().getTime();\r\n\r\n  // determines if the reply form will be rendered\r\n  const [renderReplyForm, setRenderReplyForm] = useState<Boolean>(false);\r\n\r\n  const [renderChildren, setRenderChildren] = useState<boolean>(true);\r\n\r\n  // how many pixels each indent level is\r\n  const padding = indentLevel * 20;\r\n\r\n  /** toggles the reply form when reply clicked */\r\n  function renderReply() {\r\n    if (renderReplyForm) {\r\n      return (\r\n        <AddPost\r\n          threadID={threadID}\r\n          loadThread={loadThread}\r\n          noRenderButton={true}\r\n          parentPostID={post.id}\r\n          setRenderReplyForm={setRenderReplyForm}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Hides replies from the post which was clicked */\r\n  function toggleReplies() {\r\n    // console.log(window.scrollY);\r\n    setRenderChildren((current) => !current);\r\n    return;\r\n  }\r\n\r\n  /** Renders the image if necessary */\r\n  function renderImage(): JSX.Element | void {\r\n    if (post.imageURL !== \"\") {\r\n      return (\r\n        <img\r\n          className=\"mb-2\"\r\n          style={{ maxWidth: \"400px\", width: \"100%\", height: \"auto\" }}\r\n          src={post.imageURL}\r\n          alt=\"\"\r\n        />\r\n      );\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  return (\r\n    // card\r\n    <>\r\n      <div style={{ marginLeft: padding, width: \"auto\" }}>\r\n        <div className=\"container my-3 border border-secondary rounded bg-dark\">\r\n          <div className=\"row p-2 d-flex justify-content-between\">\r\n            <h6 className=\"text-white ml-1\">{post.username}</h6>\r\n            <h6>\r\n              <small className=\"ml-3 text-muted\">{post.date}</small>\r\n            </h6>\r\n          </div>\r\n          <div className=\"row pl-2\">\r\n            {\r\n              <div className=\"text-white ml-1\">\r\n                {post.deleted ? (\r\n                  <h6 className=\"text-danger\">[Deleted]</h6>\r\n                ) : (\r\n                  post.content\r\n                )}\r\n              </div>\r\n            }\r\n          </div>\r\n          {renderImage()}\r\n          <div className=\"row\">\r\n            <div className=\"col d-flex\">\r\n              <div>\r\n                <h6 className=\"text-muted\">\r\n                  <small\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={(e) => setRenderReplyForm((prev) => !prev)}\r\n                  >\r\n                    Reply\r\n                  </small>\r\n                </h6>\r\n              </div>\r\n              <div className={\"ml-3\"}>\r\n                <h6 className=\"text-muted\">\r\n                  <small\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={(e) => toggleReplies()}\r\n                  >\r\n                    {!renderChildren &&\r\n                      post.childrenIDs.length > 0 &&\r\n                      \"Show Replies\"}\r\n                    {renderChildren &&\r\n                      post.childrenIDs.length > 0 &&\r\n                      \"Hide Replies\"}\r\n                  </small>\r\n                </h6>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {renderReply()}\r\n      </div>\r\n      {renderChildren &&\r\n        post.childrenIDs.map(\r\n          (id) => {\r\n            const childPost = getPost(id);\r\n            if (childPost !== null) {\r\n              return (\r\n                <Post\r\n                  key={id}\r\n                  loadThread={loadThread}\r\n                  post={childPost}\r\n                  getPost={getPost}\r\n                  threadID={threadID}\r\n                  indentLevel={indentLevel + 1}\r\n                />\r\n              );\r\n            }\r\n            return null;\r\n          }\r\n          // <Post key={id} loadThread={loadThread} post={} />\r\n        )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import { useState, useEffect, useContext } from \"react\";\r\nimport { IconContext } from \"react-icons\";\r\nimport { ImCross } from \"react-icons/im\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport Post from \"./Post\";\r\nimport AddPost from \"./AddPost\";\r\nimport { UserContext } from \"../Home/UserContext\";\r\n\r\nexport interface PostObj {\r\n  username: string;\r\n  content: string;\r\n  date: string; // TODO change\r\n\r\n  // post id\r\n  id: string;\r\n\r\n  // array of all the ids for children posts\r\n  childrenIDs: string[];\r\n\r\n  // the id of the parent post\r\n  parentID: string;\r\n\r\n  imageURL: string;\r\n\r\n  // if the post has been deleted\r\n  deleted?: boolean;\r\n}\r\n\r\nexport interface ThreadObject {\r\n  title: string;\r\n  username: string;\r\n  content: string;\r\n  _id: string;\r\n  posts: PostObj[];\r\n}\r\n\r\n// TODO if your own post / thread, you can delete\r\nconst Thread = () => {\r\n  const defaultThread: ThreadObject = {\r\n    title: \"\",\r\n    content: \"\",\r\n    username: \"\",\r\n    _id: \"\",\r\n    posts: [],\r\n  };\r\n\r\n  const { username, setUsername } = useContext(UserContext);\r\n  const [thread, setThread] = useState<ThreadObject>(defaultThread);\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const { id } = useParams<{ id: string }>();\r\n  const hist = useHistory();\r\n  const [topLevelPosts, setTopLevelPosts] = useState<PostObj[]>([]);\r\n\r\n  /** Loads the thread. */\r\n  async function loadThread() {\r\n    const res = await fetch(server + \"getThread/\" + id);\r\n    const jsoned = await res.json();\r\n    setThread(jsoned);\r\n\r\n    // // get top level posts\r\n    setTopLevelPosts([]);\r\n    for (const post of jsoned.posts) {\r\n      if (post.parentID === null) {\r\n        setTopLevelPosts((current) => [...current, post]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Deletes the thread. */\r\n  async function deleteThread() {\r\n    // TODO are u sure\r\n    const res = await fetch(server + \"deleteThread/\" + id);\r\n    // console.log(res.json());\r\n\r\n    // redirect to home\r\n    hist.push(\"/home\");\r\n  }\r\n\r\n  /** Renders possible actions for owner of a thread. */\r\n  function renderOwnerActions() {\r\n    if (thread.username === username) {\r\n      return (\r\n        <IconContext.Provider value={{ size: \"1em\" }}>\r\n          <ImCross\r\n            onClick={deleteThread}\r\n            style={{ cursor: \"pointer\" }}\r\n            className=\"ml-2\"\r\n          />\r\n        </IconContext.Provider>\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Gets a post by it's id */\r\n  function getPostByID(postID: string): PostObj | null {\r\n    // console.log(postID);\r\n    for (const post of thread.posts) {\r\n      if (post.id === postID) {\r\n        // console.log(post);\r\n        return post;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // TODO remove\r\n  // function temp() {\r\n  //   // getPostByID(\"3b51c4c3-0b88-4dac-aded-72a4d5c0d1c1\");\r\n  //   return;\r\n  // }\r\n\r\n  // load all the posts for given thread\r\n  useEffect(() => {\r\n    loadThread();\r\n    // temp();\r\n  }, []);\r\n\r\n  // TODO if posts are empty, say no posts\r\n  return (\r\n    <div className=\"container mt-3 mb-5\">\r\n      <div className=\"row\">\r\n        <div className=\"col d-inline-flex align-items-center\">\r\n          <h1 className=\"mb-0\">{thread.title}</h1>\r\n          {renderOwnerActions()}\r\n          {/* <button onClick={() => temp()}>adminbutton temp</button> */}\r\n        </div>\r\n      </div>\r\n      <h6>- {thread.username}</h6>\r\n      <p style={{ wordWrap: \"break-word\" }}>{thread.content}</p>\r\n      <AddPost threadID={id} loadThread={loadThread} />\r\n      <h4 className=\"mt-5\">Replies:</h4>\r\n      <div className=\"container \">\r\n        {topLevelPosts.map((post, index) => (\r\n          <Post\r\n            key={index}\r\n            post={post}\r\n            threadID={id}\r\n            loadThread={loadThread}\r\n            getPost={getPostByID}\r\n            indentLevel={0}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Thread;\r\n","import { useState } from \"react\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nconst Register = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const history = useHistory();\r\n  /** Checks if the passwords are the same. */\r\n  function checkPasswordsSame() {\r\n    if (password === confirmPassword) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /** Registers the user. */\r\n  async function registerUser(\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ) {\r\n    e.preventDefault();\r\n    setError(\"\");\r\n    setStatus(\"\");\r\n\r\n    if (!checkPasswordsSame()) {\r\n      return;\r\n    }\r\n\r\n    const obj = {\r\n      username: username,\r\n      password: password,\r\n    };\r\n\r\n    // send off to server\r\n    const url = server + \"register\";\r\n    try {\r\n      const result = await fetch(url, {\r\n        body: JSON.stringify(obj),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n      });\r\n      const response = await result.json();\r\n\r\n      if (response.hasOwnProperty(\"error\")) {\r\n        setError(response.error);\r\n        // setStatus(response.error)\r\n        return;\r\n      }\r\n\r\n      setStatus(response.status);\r\n\r\n      // delay before redirect\r\n      await new Promise((r) => setTimeout(r, 1500));\r\n\r\n      // redirect to home\r\n      history.push(\"/login\");\r\n\r\n      // TODO if it fails??\r\n      console.log(response);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-12 col-sm-8 offset-sm-2 col-xl-6 offset-xl-3\">\r\n          <form className=\"mt-5\">\r\n            <h1 className=\"mb-4 text-center\">Register</h1>\r\n            <div className=\"form-group mb-2\">\r\n              <label>Username</label>\r\n              <input\r\n                type=\"text\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n                className=\"form-control\"\r\n                placeholder=\"Enter username\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group mb-2\">\r\n              <label>Password</label>\r\n              <input\r\n                type=\"password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                className=\"form-control\"\r\n                placeholder=\"Enter password\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group mb-3\">\r\n              <label>Confirm Password</label>\r\n              <input\r\n                type=\"password\"\r\n                value={confirmPassword}\r\n                onChange={(e) => setConfirmPassword(e.target.value)}\r\n                className=\"form-control\"\r\n                placeholder=\"Enter password\"\r\n              />\r\n            </div>\r\n            <button\r\n              type=\"submit\"\r\n              onClick={(e) => registerUser(e)}\r\n              className=\"btn btn-primary\"\r\n            >\r\n              Submit\r\n            </button>\r\n          </form>\r\n          <Link to=\"/login\">\r\n            <div className=\"mt-1\">Already registered? Click here to login!</div>\r\n          </Link>\r\n          {status.length > 0 && (\r\n            <h5 className=\"mt-3 alert alert-success\">{status}</h5>\r\n          )}\r\n          {error.length > 0 && (\r\n            <h5 className=\"mt-3 alert alert-danger\">{error}</h5>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import { useState, useContext } from \"react\";\r\nimport { UserContext } from \"./UserContext\";\r\n\r\ninterface Props {\r\n  loadThreads: () => void;\r\n}\r\n\r\ninterface NewThread {\r\n  username: string;\r\n  content: string;\r\n  title: string;\r\n}\r\n\r\nconst AddThread = ({ loadThreads }: Props) => {\r\n  const [addThreadOn, setAddThreadOn] = useState<boolean>(false);\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const [content, setContent] = useState<string>(\"\");\r\n  const [title, setTitle] = useState<string>(\"\");\r\n  const { username } = useContext(UserContext);\r\n\r\n  /** Makes a post to the server */\r\n  async function makeThread() {\r\n    const thread: NewThread = {\r\n      username: username,\r\n      content: content,\r\n      title: title,\r\n    };\r\n\r\n    try {\r\n      const result = await fetch(server + \"newThread\", {\r\n        body: JSON.stringify(thread),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n      });\r\n      const response = await result.json();\r\n      loadThreads();\r\n      setAddThreadOn((current) => !current);\r\n    } catch (error) {\r\n      // TODO error handling\r\n    }\r\n  }\r\n\r\n  /** Renders the input form if needed */\r\n  function inputForm() {\r\n    if (addThreadOn) {\r\n      return (\r\n        <div className=\"form-group mt-4\">\r\n          <label className=\"\">Title</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n          <label className=\"\">Content</label>\r\n          <textarea\r\n            onChange={(e) => setContent(e.target.value)}\r\n            className=\"form-control border border-secondary\"\r\n          />\r\n          <button onClick={makeThread} className=\"btn btn-primary mt-2\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <button\r\n        className=\"btn btn-primary\"\r\n        onClick={() => setAddThreadOn((current) => !current)}\r\n      >\r\n        Add Thread\r\n      </button>\r\n    );\r\n  }\r\n\r\n  return <div className=\"mb-5\">{inputForm()}</div>;\r\n};\r\n\r\nexport default AddThread;\r\n","import { useHistory, Link } from \"react-router-dom\";\r\nimport { ThreadObject } from \"../Thread/Thread\";\r\n\r\ninterface Props {\r\n  thread: ThreadObject;\r\n}\r\n\r\nconst CONTENT_MAX_LEN = 500;\r\n\r\nconst ThreadCard = ({ thread }: Props) => {\r\n  const id = thread._id;\r\n  const title = thread.title;\r\n  const content = thread.content;\r\n  const history = useHistory();\r\n\r\n  /** Truncates text if necessary */\r\n  function truncatedText() {\r\n    if (content.length > CONTENT_MAX_LEN) {\r\n      return content.substring(1, 500) + \"...\";\r\n    }\r\n\r\n    return content;\r\n  }\r\n\r\n  // TODO limit post length, client side and server side\r\n  return (\r\n    <Link to={`/thread/${id}`}>\r\n      <div className=\"border border-primary rounded my-2 p-2\">\r\n        <h4>{title}</h4>\r\n        <p style={{ wordWrap: \"break-word\" }}>{truncatedText()}</p>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default ThreadCard;\r\n","import { useState, useEffect } from \"react\";\r\nimport AddThread from \"./AddThread\";\r\nimport ThreadCard from \"./ThreadCard\";\r\nimport { ThreadObject } from \"../Thread/Thread\";\r\n\r\nconst Home = () => {\r\n  const [threads, setThreads] = useState<ThreadObject[]>([]);\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n\r\n  async function loadThreads() {\r\n    const res = await fetch(server + \"getThreads\");\r\n    const jsoned = await res.json();\r\n    setThreads(jsoned);\r\n  }\r\n\r\n  // TODO search for posts\r\n  useEffect(() => {\r\n    loadThreads();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"font-weight-bold my-3\">Home page</h1>\r\n      {threads.map((thread) => (\r\n        <ThreadCard key={thread._id} thread={thread} />\r\n      ))}\r\n      <AddThread loadThreads={loadThreads} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import Header from \"./Boiler/Header\";\nimport Footer from \"./Boiler/Footer\";\nimport Login from \"./UserAuth/Login\";\nimport Thread from \"./Thread/Thread\";\nimport Register from \"./UserAuth/Register\";\nimport Home from \"./Home/Home\";\nimport { useState } from \"react\";\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport { UserContext } from \"./Home/UserContext\";\n\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n\n  return (\n    <Router basename=\"/\">\n      <UserContext.Provider value={{ username, setUsername }}>\n        <Header />\n        <Switch>\n          <Route path=\"/register\">\n            <Register />\n          </Route>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/thread/:id\">\n            <Thread />\n          </Route>\n          <Route path=\"/home\">\n            <Home />\n          </Route>\n          <Route path=\"/\">\n            <Login />\n          </Route>\n        </Switch>\n        <Footer />\n      </UserContext.Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}