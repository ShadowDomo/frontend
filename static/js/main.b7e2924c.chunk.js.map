{"version":3,"sources":["Home/UserContext.tsx","Boiler/NavBarProfile.tsx","Boiler/NavBar.tsx","Boiler/Header.tsx","Boiler/Footer.tsx","UserAuth/Login.tsx","Thread/AddPost.tsx","Thread/Post/PostHeader.tsx","Thread/Post/PostFooter.tsx","Thread/Post/PostBody.tsx","Thread/Post/PostVotes.tsx","Thread/Post/Post.tsx","Thread/Thread.tsx","UserAuth/Register.tsx","Home/AddThread.tsx","Home/ThreadCard.tsx","Home/Home.tsx","App.tsx","index.js"],"names":["UserContext","createContext","NavBarProfile","server","process","useContext","username","setUsername","history","useHistory","location","useLocation","a","undefined","sessionID","localStorage","getItem","fetch","result","json","jsoned","includes","pathname","push","useEffect","removeItem","getUsername","className","to","onClick","length","renderRegister","NavBar","Header","Footer","style","position","bottom","Login","useState","password","setPassword","status","setStatus","setUsernameAlias","e","preventDefault","obj","body","JSON","stringify","headers","method","response","hasOwnProperty","error","setItem","type","value","onChange","target","placeholder","AddPost","threadID","loadThread","noRenderButton","parentPostID","setRenderReplyForm","addPostOn","setAddPostOn","content","setContent","imageURL","setImageURL","makePost","post","date","Date","getTime","toString","childrenIDs","parentID","current","cancelHandler","rows","PostHeader","timeSince","setTimeSince","timer","setInterval","time","parseInt","clearTimeout","prettyMS","compact","PostFooter","renderChildren","setRenderChildren","deletePost","postID","id","hidden","resp","toggleReplies","hidePostServerSide","cursor","prev","deleted","deletePostButton","PostBody","wordBreak","maxWidth","width","height","src","alt","renderImage","PostVotes","votes","setVotes","userVote","setUserVote","getVotes","usersVote","jsonedvote","vote","payload","Provider","size","color","marginBottom","Post","getPost","indentLevel","postNotProp","setPostNotProp","renderReplyForm","padding","retrievePost","result2","updatedpost","console","log","r","loadPost","marginLeft","paddingLeft","renderReply","map","childPost","Thread","title","_id","posts","thread","setThread","useParams","hist","topLevelPosts","setTopLevelPosts","res","deleteThread","getPostByID","minWidth","renderOwnerActions","wordWrap","index","Register","confirmPassword","setConfirmPassword","setError","checkPasswordsSame","Promise","setTimeout","registerUser","AddThread","loadThreads","addThreadOn","setAddThreadOn","setTitle","checkThreadValidity","makeThread","errorMessage","ThreadCard","substring","Home","threads","setThreads","App","basename","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7e2924c.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const UserContext = createContext<any>(null);\r\n","import { useContext } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport { UserContext } from \"../Home/UserContext\";\r\n\r\nconst NavBarProfile = () => {\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const { username, setUsername } = useContext(UserContext);\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  async function getUsername() {\r\n    const sessionID = localStorage.getItem(\"sessionID\");\r\n\r\n    if (sessionID === undefined) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = await fetch(server + \"getUsername/\" + sessionID);\r\n      const jsoned = await result.json();\r\n      // redirect to login if not logged in\r\n      if (\r\n        !jsoned.username &&\r\n        ![\"/login\", \"/register\"].includes(location.pathname)\r\n      ) {\r\n        history.push(\"/login\");\r\n        return;\r\n      }\r\n      setUsername(jsoned.username);\r\n    } catch (error) {\r\n      history.push(\"/login\");\r\n    }\r\n  }\r\n\r\n  // useEffect(() => {}, []);\r\n\r\n  useEffect(() => {\r\n    // explicitly redirect to login for all non specified routes\r\n    if (location.pathname === \"/\") {\r\n      localStorage.removeItem(\"sessionID\");\r\n      history.push(\"/login\");\r\n      setUsername(\"\");\r\n      return;\r\n    }\r\n    getUsername();\r\n  }, [location.pathname]);\r\n\r\n  /** Logs the user out. */\r\n  function logout() {\r\n    localStorage.removeItem(\"sessionID\");\r\n    setUsername(\"\");\r\n  }\r\n\r\n  /** Render logout button if logged in */\r\n  function renderLogoutConditionally() {\r\n    // if logged in\r\n    if (username && username.length > 0) {\r\n      return <h5 className=\"text-primary\">logout</h5>;\r\n    }\r\n\r\n    if (location.pathname === \"/register\") {\r\n      return <h5>Login</h5>;\r\n    }\r\n  }\r\n\r\n  /** Render Register button if not logged in */\r\n  function renderRegister() {\r\n    if (location.pathname === \"/register\") {\r\n      return;\r\n    }\r\n\r\n    // if logged out and not on register page\r\n    if (!username) {\r\n      return <h5 className=\"font-weight-bold\">Register</h5>;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h6 className=\"text-white\">{username}</h6>\r\n      <div className=\"d-flex flex-row\">\r\n        <Link className=\"mr-3\" to=\"/login\" onClick={logout}>\r\n          {renderLogoutConditionally()}\r\n        </Link>\r\n        <Link to=\"/register\">{renderRegister()}</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBarProfile;\r\n","import { Link } from \"react-router-dom\";\r\nimport NavBarProfile from \"./NavBarProfile\";\r\n\r\nconst NavBar = () => {\r\n  /** Returns where the home button should redirect to. */\r\n  function allowedUrl(): string {\r\n    if (localStorage.getItem(\"sessionID\") === null) {\r\n      return \"#\";\r\n    }\r\n    return \"/home\";\r\n  }\r\n  return (\r\n    <div className=\"bg-dark navbar w-100 static-top\">\r\n      <Link to={allowedUrl}>\r\n        <h1 className=\"navbar-brand mx-3 text-light\">Forum Clone</h1>\r\n      </Link>\r\n\r\n      <NavBarProfile />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import NavBar from \"./NavBar\";\r\nimport { createContext, useState } from \"react\";\r\n\r\n// interface UserContextType {\r\n//   username: string | null;\r\n//   setUsername: React.Dispatch<React.SetStateAction<string>>;\r\n// }\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","const Footer = () => {\r\n  return (\r\n    <div className=\"bg-dark w-100\" style={{ position: \"fixed\", bottom: 0 }}>\r\n      <h6 className=\"text-light m-2\">Dom Zhu - 2021</h6>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { UserContext } from \"../Home/UserContext\";\r\n\r\nconst Login: React.FC = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const history = useHistory();\r\n  const usernameAlias = useContext(UserContext).username;\r\n  const setUsernameAlias = useContext(UserContext).setUsername;\r\n\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n\r\n  /** Logs the user in. */\r\n  async function login(e: React.MouseEvent) {\r\n    e.preventDefault();\r\n\r\n    const obj = {\r\n      username: username,\r\n      password: password,\r\n    };\r\n\r\n    // send off to server\r\n    const url = server + \"login\";\r\n    try {\r\n      const result = await fetch(url, {\r\n        body: JSON.stringify(obj),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n      });\r\n      const response = await result.json();\r\n\r\n      if (response.hasOwnProperty(\"error\")) {\r\n        setStatus(response.error);\r\n        return;\r\n      }\r\n      localStorage.setItem(\"sessionID\", response.sessionID);\r\n\r\n      // username already used locally, so need different var name\r\n      setUsernameAlias(username);\r\n      history.push(\"/home\");\r\n    } catch (err) {\r\n      setStatus(\"Failed to login. Please try again.\");\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // console.log(\"render login page\");\r\n    // // log user out if visit the page while logged in\r\n    // if (usernameAlias) {\r\n    //   localStorage.removeItem(\"sessionID\");\r\n    //   setUsernameAlias(\"\");\r\n    //   setUsername(\"\");\r\n    // }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-12 col-sm-8 offset-sm-2 col-xl-6 offset-xl-3\">\r\n          <form className=\"mt-5\">\r\n            <h1 className=\"mb-4 text-center\">Login</h1>\r\n            <div className=\"form-group mb-2\">\r\n              <label>Username</label>\r\n              <input\r\n                type=\"text\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n                className=\"form-control\"\r\n                placeholder=\"Enter username\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group mb-3\">\r\n              <label>Password</label>\r\n              <input\r\n                type=\"password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                className=\"form-control\"\r\n                placeholder=\"Enter password\"\r\n              />\r\n            </div>\r\n            <button type=\"submit\" onClick={login} className=\"btn btn-primary\">\r\n              Submit\r\n            </button>\r\n          </form>\r\n          <Link to=\"/register\">\r\n            <div className=\"mt-1\">New user? Click here to register!</div>\r\n          </Link>\r\n          {status.length > 0 && (\r\n            <h5 className=\"mt-3 alert alert-danger\">{status}</h5>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { useState, useContext, useEffect } from \"react\";\r\nimport { UserContext } from \"../Home/UserContext\";\r\n\r\ninterface Props {\r\n  // the current thread's ID\r\n  threadID: string;\r\n  loadThread: () => void;\r\n\r\n  // if false, then don't render the add post button\r\n  noRenderButton?: boolean;\r\n\r\n  // when in reply mode\r\n  parentPostID?: string;\r\n\r\n  // so we can remove the reply form component when post submitted\r\n  setRenderReplyForm?: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\ninterface PostRequest {\r\n  username: string;\r\n  content: string;\r\n  date: string;\r\n  threadID: string;\r\n  childrenIDs: string[]; // TODO maybe make server side\r\n  parentID?: string;\r\n  imageURL: string;\r\n}\r\n\r\nconst AddPost = ({\r\n  threadID,\r\n  loadThread,\r\n  noRenderButton,\r\n  parentPostID,\r\n  setRenderReplyForm,\r\n}: Props) => {\r\n  const [addPostOn, setAddPostOn] = useState<boolean>(false);\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const [content, setContent] = useState<string>(\"\");\r\n  const { username } = useContext(UserContext);\r\n  const [imageURL, setImageURL] = useState<string>(\"\");\r\n\r\n  useEffect(() => {\r\n    if (noRenderButton === undefined) {\r\n      setAddPostOn(false);\r\n    } else {\r\n      setAddPostOn(true);\r\n    }\r\n  }, []);\r\n\r\n  /** Makes a post to the server */\r\n  async function makePost() {\r\n    // console.log(new Date().getTime().toString());\r\n    const post: PostRequest = {\r\n      username: username, // username temp\r\n      content: content,\r\n      date: new Date().getTime().toString(),\r\n      threadID: threadID,\r\n      childrenIDs: [],\r\n      parentID: parentPostID, // TODO if not reply, then parentID is ''\r\n      imageURL: imageURL,\r\n    };\r\n\r\n    try {\r\n      const result = await fetch(server + \"makePost\", {\r\n        body: JSON.stringify(post),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n      });\r\n      const response = await result.json();\r\n      loadThread();\r\n      setAddPostOn((current) => !current);\r\n      setContent(\"\");\r\n      setImageURL(\"\");\r\n    } catch (error) {\r\n      // TODO error handling\r\n      return;\r\n    }\r\n\r\n    cancelHandler();\r\n  }\r\n\r\n  /** Closes the form. */\r\n  function cancelHandler() {\r\n    setAddPostOn(false);\r\n    if (setRenderReplyForm) {\r\n      setRenderReplyForm(false);\r\n    }\r\n  }\r\n\r\n  /** Renders the add post form. */\r\n  function renderForm() {\r\n    return (\r\n      <div className=\"form-group mt-4 mb-5\">\r\n        <label className=\"\">Content</label>\r\n        <textarea\r\n          value={content}\r\n          placeholder=\"What are your thoughts?\"\r\n          onChange={(e) => setContent(e.target.value)}\r\n          className=\"form-control border border-secondary\"\r\n          rows={6}\r\n        />\r\n        <div className=\"mt-3\">\r\n          <label>Image url</label>\r\n          <input\r\n            value={imageURL}\r\n            type=\"text\"\r\n            onChange={(e) => setImageURL(e.target.value)}\r\n            className=\"form-control border border-secondary\"\r\n          />\r\n        </div>\r\n        <div className=\"d-flex flex-row justify-content-end\">\r\n          <button\r\n            onClick={(e) => cancelHandler()}\r\n            className=\"btn btn-primary mt-2\"\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            onClick={makePost}\r\n            className=\"btn btn-primary mt-2 ml-3 bg-secondary text-dark border border-secondary\"\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /** Renders the add post button. */\r\n  function renderButton() {\r\n    return (\r\n      <div>\r\n        <button\r\n          className=\"btn btn-primary\"\r\n          onClick={() => setAddPostOn((current) => !current)}\r\n        >\r\n          Add Reply\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {addPostOn && renderForm()}\r\n      {!addPostOn && !noRenderButton && renderButton()}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddPost;\r\n","import { PostObj } from \"../Thread\";\r\nimport prettyMS from \"pretty-ms\";\r\nimport { useState, useEffect } from \"react\";\r\ninterface Props {\r\n  post: PostObj;\r\n}\r\n\r\nconst PostHeader = ({ post }: Props) => {\r\n  const [timeSince, setTimeSince] = useState<number>(0);\r\n\r\n  useEffect(() => {\r\n    let timer = setInterval(() => {\r\n      const time = new Date().getTime() - parseInt(post.date);\r\n\r\n      setTimeSince(time);\r\n    }, 100);\r\n\r\n    // cleanup\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [post.date]);\r\n  // continuously update how long ago the post was made\r\n\r\n  return (\r\n    <div className=\"row p-2 d-flex justify-content-between\">\r\n      <h6 className=\"text-white ml-1\">{post.username}</h6>\r\n      <h6>\r\n        {post.date !== \"1\" && (\r\n          <small className=\"ml-3 text-muted\">\r\n            {prettyMS(timeSince, { compact: true })} ago\r\n          </small>\r\n        )}\r\n      </h6>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostHeader;\r\n","import { PostObj } from \"../Thread\";\r\nimport { UserContext } from \"../../Home/UserContext\";\r\nimport { useContext } from \"react\";\r\n\r\ninterface Props {\r\n  post: PostObj;\r\n  renderChildren: boolean;\r\n  setRenderReplyForm: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setRenderChildren: React.Dispatch<React.SetStateAction<boolean>>;\r\n  deletePost: () => void;\r\n}\r\n\r\nconst PostFooter = ({\r\n  post,\r\n  renderChildren,\r\n  setRenderReplyForm,\r\n  setRenderChildren,\r\n  deletePost,\r\n}: Props) => {\r\n  const username = useContext(UserContext).username;\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n\r\n  /** Hides the post for the user. */\r\n  async function hidePostServerSide() {\r\n    const resp = await fetch(server + \"hidePost\", {\r\n      body: JSON.stringify({\r\n        username: username,\r\n        postID: post.id,\r\n        hidden: renderChildren,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n    });\r\n    const jsoned = await resp.json();\r\n    // console.log(jsoned);\r\n  }\r\n\r\n  /** Hides replies from the post which was clicked */\r\n  function toggleReplies() {\r\n    setRenderChildren((current) => !current);\r\n    hidePostServerSide();\r\n    // console.log(username);\r\n    return;\r\n  }\r\n\r\n  /** the reply button */\r\n  function replyButton() {\r\n    return (\r\n      <div>\r\n        <h6 className=\"text-muted\">\r\n          <small\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={(e) => setRenderReplyForm((prev) => !prev)}\r\n          >\r\n            Reply\r\n          </small>\r\n        </h6>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /** the show / hide reply button */\r\n  function showHideReplyButton() {\r\n    // dont render if no children\r\n    if (post.childrenIDs.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div className={\"ml-3\"}>\r\n        <h6 className=\"text-muted\">\r\n          <small style={{ cursor: \"pointer\" }} onClick={(e) => toggleReplies()}>\r\n            {!renderChildren && \"Show Replies\"}\r\n            {renderChildren && \"Hide Replies\"}\r\n          </small>\r\n        </h6>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /** the delete post button */\r\n  function deletePostButton() {\r\n    // only render if post isn't already deleted\r\n    if (post.deleted) {\r\n      return;\r\n    }\r\n\r\n    // only delete your own posts // TODO fix server side\r\n    if (post.username !== username) {\r\n      return;\r\n    }\r\n\r\n    return (\r\n      <div className={\"ml-3\"}>\r\n        <h6 className=\"text-muted\">\r\n          <small style={{ cursor: \"pointer\" }} onClick={(e) => deletePost()}>\r\n            Delete Post\r\n          </small>\r\n        </h6>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col d-flex\">\r\n        {replyButton()}\r\n        {showHideReplyButton()}\r\n        {deletePostButton()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostFooter;\r\n","import { PostObj } from \"../Thread\";\r\n\r\ninterface Props {\r\n  post: PostObj;\r\n}\r\n\r\nconst PostBody = ({ post }: Props) => {\r\n  /** Renders the image if necessary */\r\n  function renderImage(): JSX.Element | void {\r\n    if (post.imageURL !== \"\") {\r\n      return (\r\n        <img\r\n          className=\"mb-2\"\r\n          style={{ maxWidth: \"400px\", width: \"100%\", height: \"auto\" }}\r\n          src={post.imageURL}\r\n          alt=\"\"\r\n        />\r\n      );\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"row pl-2\">\r\n        <div className=\"text-white ml-1\">\r\n          {post.deleted ? (\r\n            <h6 className=\"text-danger\">[Deleted]</h6>\r\n          ) : (\r\n            <p style={{ wordBreak: \"break-word\" }}>{post.content}</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n      {renderImage()}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostBody;\r\n","import { useState, useEffect } from \"react\";\r\nimport { IconContext } from \"react-icons\";\r\nimport { IoIosArrowUp, IoIosArrowDown } from \"react-icons/io\";\r\n\r\ninterface Props {\r\n  postID: string;\r\n  username: string;\r\n}\r\n\r\nconst PostVotes = ({ postID, username }: Props) => {\r\n  const [votes, setVotes] = useState<number>(0);\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const [userVote, setUserVote] = useState<number>(0);\r\n  let upColor = \"\";\r\n  let downColor = \"\";\r\n\r\n  useEffect(() => {\r\n    getVotes();\r\n  }, []);\r\n\r\n  // should ensure vote colours are loaded\r\n  useEffect(() => {\r\n    getVotes();\r\n  }, [username]);\r\n\r\n  async function getVotes() {\r\n    if (username === \"\") return;\r\n\r\n    const resp = await fetch(server + \"getPostVotes\", {\r\n      body: JSON.stringify({ postID: postID }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n    });\r\n    const jsoned = await resp.json();\r\n    setVotes(parseInt(jsoned.votes));\r\n\r\n    // set colour and upvote\r\n    const usersVote = await fetch(server + \"getUsersVotes\", {\r\n      body: JSON.stringify({ postID: postID, username: username }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n    });\r\n    const jsonedvote = await usersVote.json();\r\n    // console.log(`set user vote to ${jsonedvote.vote}`);\r\n    setUserVote(jsonedvote.vote);\r\n  }\r\n\r\n  /** Upvotes or downvotes post */\r\n  async function vote(vote: string) {\r\n    // TODO reload post after vote\r\n\r\n    const payload = {\r\n      postID: postID,\r\n      vote: vote,\r\n      username: username,\r\n    };\r\n\r\n    const resp = await fetch(server + \"upvotePost\", {\r\n      body: JSON.stringify(payload),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n    });\r\n\r\n    getVotes();\r\n  }\r\n\r\n  // TODO change hardcoded votes\r\n  return (\r\n    <div className=\"d-flex flex-column mx-2\">\r\n      <IconContext.Provider value={{ size: \"2em\" }}>\r\n        {userVote === 1 && (\r\n          <IoIosArrowUp\r\n            style={{ cursor: \"pointer\", color: \"orange\" }}\r\n            onClick={(e) => vote(\"1\")}\r\n          />\r\n        )}\r\n        {userVote !== 1 && (\r\n          <IoIosArrowUp\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={(e) => vote(\"1\")}\r\n          />\r\n        )}\r\n\r\n        <h5 className=\"text-white text-center\" style={{ marginBottom: \"0\" }}>\r\n          {votes}\r\n        </h5>\r\n        {userVote === -1 && (\r\n          <IoIosArrowDown\r\n            style={{ cursor: \"pointer\", color: \"blue\" }}\r\n            onClick={(e) => vote(\"-1\")}\r\n          />\r\n        )}\r\n        {userVote !== -1 && (\r\n          <IoIosArrowDown\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={(e) => vote(\"-1\")}\r\n          />\r\n        )}\r\n      </IconContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostVotes;\r\n","import { PostObj } from \"../Thread\";\r\nimport AddPost from \"../AddPost\";\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport PostHeader from \"./PostHeader\";\r\nimport PostFooter from \"./PostFooter\";\r\nimport PostBody from \"./PostBody\";\r\nimport PostVotes from \"./PostVotes\";\r\nimport { UserContext } from \"../../Home/UserContext\";\r\n\r\ninterface Props {\r\n  postID: string;\r\n  threadID: string;\r\n  loadThread: () => void;\r\n  getPost: (postID: string) => PostObj | null;\r\n  indentLevel: number;\r\n}\r\n\r\nconst server = process.env.REACT_APP_API_SERVER;\r\n\r\nconst Post = ({\r\n  postID,\r\n  threadID,\r\n  loadThread,\r\n  getPost,\r\n  indentLevel,\r\n}: Props) => {\r\n  const defaultPost: PostObj = {\r\n    childrenIDs: [],\r\n    content: \"loading...\",\r\n    date: \"1\",\r\n    id: \"\",\r\n    imageURL: \"\",\r\n    parentID: \"\",\r\n    username: \"loading...\",\r\n  };\r\n  const username = useContext(UserContext).username;\r\n\r\n  // TODO fix later\r\n  const [postNotProp, setPostNotProp] = useState<PostObj>(defaultPost);\r\n\r\n  // determines if the reply form will be rendered\r\n  const [renderReplyForm, setRenderReplyForm] = useState<boolean>(false);\r\n\r\n  // determines if children are rendered\r\n  const [renderChildren, setRenderChildren] = useState<boolean>(true);\r\n\r\n  // how many pixels each indent level is\r\n  const padding = indentLevel * 20;\r\n\r\n  useEffect(() => {\r\n    const loadPost = async () => {\r\n      // console.log(\"setpost\");\r\n      const r = await retrievePost(postID);\r\n      setPostNotProp(r);\r\n    };\r\n\r\n    loadPost();\r\n  }, []);\r\n\r\n  /** toggles the reply form when reply clicked */\r\n  function renderReply() {\r\n    if (renderReplyForm) {\r\n      return (\r\n        <AddPost\r\n          threadID={threadID}\r\n          loadThread={loadThread}\r\n          noRenderButton={true}\r\n          parentPostID={postNotProp.id}\r\n          setRenderReplyForm={setRenderReplyForm}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Gets post */\r\n  async function retrievePost(postID: string) {\r\n    const payload = { threadID: threadID, postID: postID };\r\n\r\n    const result = await fetch(server + \"getPost\", {\r\n      body: JSON.stringify(payload),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n    });\r\n    const response: PostObj = await result.json();\r\n    // return response;\r\n\r\n    // get hidden state.\r\n    const result2 = await fetch(server + \"isPostHidden\", {\r\n      body: JSON.stringify({\r\n        username: username,\r\n        postID: postID,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n    });\r\n    const jsoned = await result2.json();\r\n    // console.log(`post id: ${postID} is hidden: ${jsoned.status}`);\r\n    setRenderChildren(!jsoned.status);\r\n\r\n    // console.log(response);\r\n    return response;\r\n  }\r\n\r\n  /** Deletes a post from the server */\r\n  async function deletePost() {\r\n    const payload = { threadID: threadID, postID: postID };\r\n\r\n    try {\r\n      const result = await fetch(server + \"deletePost\", {\r\n        body: JSON.stringify(payload),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n      });\r\n      const response: Object = await result.json();\r\n      if (response.hasOwnProperty(\"status\")) {\r\n        const updatedpost = await retrievePost(postID);\r\n        setPostNotProp(updatedpost);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    // card\r\n    <>\r\n      <div style={{ marginLeft: padding, width: \"auto\" }}>\r\n        <div className=\"my-3 d-flex border border-secondary rounded bg-dark\">\r\n          <PostVotes postID={postID} username={username} />\r\n          <div className=\"container\" style={{ paddingLeft: \"0\" }}>\r\n            <PostHeader post={postNotProp} />\r\n            <PostBody post={postNotProp} />\r\n            <PostFooter\r\n              post={postNotProp}\r\n              renderChildren={renderChildren}\r\n              setRenderReplyForm={setRenderReplyForm}\r\n              setRenderChildren={setRenderChildren}\r\n              deletePost={deletePost}\r\n            />\r\n          </div>\r\n        </div>\r\n        {renderReply()}\r\n      </div>\r\n      {/* Recursively render children */}\r\n      {renderChildren &&\r\n        postNotProp.childrenIDs.map((id) => {\r\n          const childPost = getPost(id);\r\n          if (childPost !== null) {\r\n            return (\r\n              <Post\r\n                key={id}\r\n                loadThread={loadThread}\r\n                postID={childPost.id}\r\n                getPost={getPost}\r\n                threadID={threadID}\r\n                indentLevel={indentLevel + 1}\r\n              />\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import { useState, useEffect, useContext } from \"react\";\r\nimport { IconContext } from \"react-icons\";\r\nimport { ImCross } from \"react-icons/im\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport Post from \"./Post/Post\";\r\nimport AddPost from \"./AddPost\";\r\nimport { UserContext } from \"../Home/UserContext\";\r\n\r\nexport interface PostObj {\r\n  username: string;\r\n  content: string;\r\n  date: string; // TODO change\r\n\r\n  // post id\r\n  id: string;\r\n\r\n  // array of all the ids for children posts\r\n  childrenIDs: string[];\r\n\r\n  // the id of the parent post\r\n  parentID: string;\r\n\r\n  imageURL: string;\r\n\r\n  // if the post has been deleted\r\n  deleted?: boolean;\r\n}\r\n\r\nexport interface ThreadObject {\r\n  title: string;\r\n  username: string;\r\n  content: string;\r\n  _id: string;\r\n  posts: PostObj[];\r\n}\r\n\r\n// TODO if your own post / thread, you can delete\r\nconst Thread = () => {\r\n  const defaultThread: ThreadObject = {\r\n    title: \"\",\r\n    content: \"\",\r\n    username: \"\",\r\n    _id: \"\",\r\n    posts: [],\r\n  };\r\n\r\n  const { username, setUsername } = useContext(UserContext);\r\n  const [thread, setThread] = useState<ThreadObject>(defaultThread);\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const { id } = useParams<{ id: string }>();\r\n  const hist = useHistory();\r\n  const [topLevelPosts, setTopLevelPosts] = useState<PostObj[]>([]);\r\n\r\n  /** Loads the thread. */\r\n  async function loadThread() {\r\n    const res = await fetch(server + \"getThread/\" + id);\r\n    const jsoned = await res.json();\r\n    setThread(jsoned);\r\n\r\n    // // get top level posts\r\n    setTopLevelPosts([]);\r\n    for (const post of jsoned.posts) {\r\n      if (post.parentID === null) {\r\n        setTopLevelPosts((current) => [...current, post]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Deletes the thread. */\r\n  async function deleteThread() {\r\n    // TODO are u sure\r\n    const res = await fetch(server + \"deleteThread/\" + id);\r\n    // console.log(res.json());\r\n\r\n    // redirect to home\r\n    hist.push(\"/home\");\r\n  }\r\n\r\n  /** Renders possible actions for owner of a thread. */\r\n  function renderOwnerActions() {\r\n    if (thread.username === username) {\r\n      return (\r\n        <IconContext.Provider value={{ size: \"1em\" }}>\r\n          <ImCross\r\n            onClick={deleteThread}\r\n            style={{ cursor: \"pointer\", minWidth: \"15px\" }}\r\n            className=\"ml-2\"\r\n          />\r\n        </IconContext.Provider>\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Gets a post by it's id */\r\n  function getPostByID(postID: string): PostObj | null {\r\n    // console.log(postID);\r\n    for (const post of thread.posts) {\r\n      if (post.id === postID) {\r\n        // console.log(post);\r\n        return post;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // load all the posts for given thread\r\n  useEffect(() => {\r\n    loadThread();\r\n  }, []);\r\n\r\n  // TODO if posts are empty, say no posts\r\n  return (\r\n    <div className=\"container mt-3 mb-5\">\r\n      <div className=\"row\">\r\n        <div className=\"col d-inline-flex align-items-center\">\r\n          <h1 className=\"mb-0\">{thread.title}</h1>\r\n          {renderOwnerActions()}\r\n        </div>\r\n      </div>\r\n      <h6>- {thread.username}</h6>\r\n      <p style={{ wordWrap: \"break-word\" }}>{thread.content}</p>\r\n      <AddPost threadID={id} loadThread={loadThread} />\r\n      <h4 className=\"mt-5\">Replies:</h4>\r\n      <div className=\"container \">\r\n        {topLevelPosts.map((post, index) => (\r\n          <Post\r\n            key={index}\r\n            postID={post.id}\r\n            threadID={id}\r\n            loadThread={loadThread}\r\n            getPost={getPostByID}\r\n            indentLevel={0}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Thread;\r\n","import { useState } from \"react\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nconst Register = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const history = useHistory();\r\n  /** Checks if the passwords are the same. */\r\n  function checkPasswordsSame() {\r\n    if (password === confirmPassword) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /** Registers the user. */\r\n  async function registerUser(\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ) {\r\n    e.preventDefault();\r\n    setError(\"\");\r\n    setStatus(\"\");\r\n\r\n    if (!checkPasswordsSame()) {\r\n      return;\r\n    }\r\n\r\n    const obj = {\r\n      username: username,\r\n      password: password,\r\n    };\r\n\r\n    // send off to server\r\n    const url = server + \"register\";\r\n    try {\r\n      const result = await fetch(url, {\r\n        body: JSON.stringify(obj),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n      });\r\n      const response = await result.json();\r\n\r\n      if (response.hasOwnProperty(\"error\")) {\r\n        setError(response.error);\r\n        // setStatus(response.error)\r\n        return;\r\n      }\r\n\r\n      setStatus(response.status);\r\n\r\n      // delay before redirect\r\n      await new Promise((r) => setTimeout(r, 1500));\r\n\r\n      // redirect to home\r\n      history.push(\"/login\");\r\n\r\n      // TODO if it fails??\r\n      // console.log(response);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-12 col-sm-8 offset-sm-2 col-xl-6 offset-xl-3\">\r\n          <form className=\"mt-5\">\r\n            <h1 className=\"mb-4 text-center\">Register</h1>\r\n            <div className=\"form-group mb-2\">\r\n              <label>Username</label>\r\n              <input\r\n                type=\"text\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n                className=\"form-control\"\r\n                placeholder=\"Enter username\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group mb-2\">\r\n              <label>Password</label>\r\n              <input\r\n                type=\"password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                className=\"form-control\"\r\n                placeholder=\"Enter password\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group mb-3\">\r\n              <label>Confirm Password</label>\r\n              <input\r\n                type=\"password\"\r\n                value={confirmPassword}\r\n                onChange={(e) => setConfirmPassword(e.target.value)}\r\n                className=\"form-control\"\r\n                placeholder=\"Enter password\"\r\n              />\r\n            </div>\r\n            <button\r\n              type=\"submit\"\r\n              onClick={(e) => registerUser(e)}\r\n              className=\"btn btn-primary\"\r\n            >\r\n              Submit\r\n            </button>\r\n          </form>\r\n          <Link to=\"/login\">\r\n            <div className=\"mt-1\">Already registered? Click here to login!</div>\r\n          </Link>\r\n          {status.length > 0 && (\r\n            <h5 className=\"mt-3 alert alert-success\">{status}</h5>\r\n          )}\r\n          {error.length > 0 && (\r\n            <h5 className=\"mt-3 alert alert-danger\">{error}</h5>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import { useState, useContext } from \"react\";\r\nimport { UserContext } from \"./UserContext\";\r\n\r\ninterface Props {\r\n  loadThreads: () => void;\r\n}\r\n\r\ninterface NewThread {\r\n  username: string;\r\n  content: string;\r\n  title: string;\r\n}\r\n\r\nconst MAX_THREAD_TITLE_LENGTH = 150;\r\nconst MAX_THREAD_CONTENT_LENGTH = 5000;\r\n\r\nconst AddThread = ({ loadThreads }: Props) => {\r\n  const [addThreadOn, setAddThreadOn] = useState<boolean>(false);\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n  const [content, setContent] = useState<string>(\"\");\r\n  const [title, setTitle] = useState<string>(\"\");\r\n  const { username } = useContext(UserContext);\r\n\r\n  // the error message if needed\r\n  const [status, setStatus] = useState<string>(\"\");\r\n\r\n  /** Checks if the thread is valid. */\r\n  function checkThreadValidity() {\r\n    if (content.length > MAX_THREAD_CONTENT_LENGTH) {\r\n      setStatus(\"Exceeded content length!\");\r\n      return false;\r\n    }\r\n\r\n    if (title.length > MAX_THREAD_TITLE_LENGTH) {\r\n      setStatus(\"Exceeded title length!\");\r\n      return false;\r\n    }\r\n\r\n    setStatus(\"\");\r\n    return true;\r\n  }\r\n\r\n  /** Makes a post to the server */\r\n  async function makeThread() {\r\n    // error checking\r\n    if (!checkThreadValidity()) return;\r\n\r\n    const thread: NewThread = {\r\n      username: username,\r\n      content: content,\r\n      title: title,\r\n    };\r\n\r\n    try {\r\n      const result = await fetch(server + \"newThread\", {\r\n        body: JSON.stringify(thread),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n      });\r\n      const response = await result.json();\r\n      loadThreads();\r\n      setAddThreadOn((current) => !current);\r\n    } catch (error) {\r\n      // TODO error handling\r\n    }\r\n  }\r\n\r\n  /** The error message to be displayed. */\r\n  function errorMessage() {\r\n    if (status.length === 0) return;\r\n\r\n    return <h5 className=\"alert alert-danger mt-2\">{status}</h5>;\r\n  }\r\n\r\n  /** Renders the input form if needed */\r\n  function inputForm() {\r\n    if (addThreadOn) {\r\n      return (\r\n        <div className=\"form-group mt-4\">\r\n          <label className=\"\">Title</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n          <label className=\"\">Content</label>\r\n          <textarea\r\n            onChange={(e) => setContent(e.target.value)}\r\n            className=\"form-control border border-secondary\"\r\n          />\r\n          <button onClick={makeThread} className=\"btn btn-primary mt-2\">\r\n            Submit\r\n          </button>\r\n          {errorMessage()}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <button\r\n        className=\"btn btn-primary\"\r\n        onClick={() => setAddThreadOn((current) => !current)}\r\n      >\r\n        Add Thread\r\n      </button>\r\n    );\r\n  }\r\n\r\n  return <div className=\"mb-5\">{inputForm()}</div>;\r\n};\r\n\r\nexport default AddThread;\r\n","import { useHistory, Link } from \"react-router-dom\";\r\nimport { ThreadObject } from \"../Thread/Thread\";\r\n\r\ninterface Props {\r\n  thread: ThreadObject;\r\n}\r\n\r\nconst CONTENT_MAX_LEN = 500;\r\n\r\nconst ThreadCard = ({ thread }: Props) => {\r\n  const id = thread._id;\r\n  const title = thread.title;\r\n  const content = thread.content;\r\n  const history = useHistory();\r\n\r\n  /** Truncates text if necessary */\r\n  function truncatedText() {\r\n    if (content.length > CONTENT_MAX_LEN) {\r\n      return content.substring(1, 500) + \"...\";\r\n    }\r\n\r\n    return content;\r\n  }\r\n\r\n  // TODO limit post length, client side and server side\r\n  return (\r\n    <Link to={`/thread/${id}`}>\r\n      <div className=\"border border-primary rounded my-2 p-2\">\r\n        <h4>{title}</h4>\r\n        <p style={{ wordWrap: \"break-word\" }}>{truncatedText()}</p>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default ThreadCard;\r\n","import { useState, useEffect } from \"react\";\r\nimport AddThread from \"./AddThread\";\r\nimport ThreadCard from \"./ThreadCard\";\r\nimport { ThreadObject } from \"../Thread/Thread\";\r\n\r\nconst Home = () => {\r\n  const [threads, setThreads] = useState<ThreadObject[]>([]);\r\n  const server = process.env.REACT_APP_API_SERVER;\r\n\r\n  async function loadThreads() {\r\n    const res = await fetch(server + \"getThreads\");\r\n    const jsoned = await res.json();\r\n    setThreads(jsoned);\r\n  }\r\n\r\n  // TODO search for posts\r\n  useEffect(() => {\r\n    loadThreads();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"font-weight-bold my-3\">Home page</h1>\r\n      {threads.map((thread) => (\r\n        <ThreadCard key={thread._id} thread={thread} />\r\n      ))}\r\n      <AddThread loadThreads={loadThreads} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import Header from \"./Boiler/Header\";\nimport Footer from \"./Boiler/Footer\";\nimport Login from \"./UserAuth/Login\";\nimport Thread from \"./Thread/Thread\";\nimport Register from \"./UserAuth/Register\";\nimport Home from \"./Home/Home\";\nimport { useState } from \"react\";\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport { UserContext } from \"./Home/UserContext\";\n\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n\n  return (\n    <Router basename=\"/\">\n      <UserContext.Provider value={{ username, setUsername }}>\n        <Header />\n        <Switch>\n          <Route path=\"/register\">\n            <Register />\n          </Route>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/thread/:id\">\n            <Thread />\n          </Route>\n          <Route path=\"/home\">\n            <Home />\n          </Route>\n          <Route path=\"/\">\n            <Login />\n          </Route>\n        </Switch>\n        <Footer />\n      </UserContext.Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}